"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V2390 V2391) (trap-error (shen.prh V2390 V2391 0) (lambda E V2390)))

(defun shen.prh (V2392 V2393 V2394) (shen.prh V2392 V2393 (shen.write-char-and-inc V2392 V2393 V2394)))

(defun shen.write-char-and-inc (V2395 V2396 V2397) (do (write-byte (string->n (pos V2395 V2397)) V2396) (+ V2397 1)))

(defun print (V2398) (let String (shen.insert V2398 "~S") (let Print (shen.prhush String (stoutput)) V2398)))

(defun shen.prhush (V2399 V2400) (if (value *hush*) V2399 (pr V2399 V2400)))

(defun shen.mkstr (V2401 V2402) (cond ((string? V2401) (shen.mkstr-l (shen.proc-nl V2401) V2402)) (true (shen.mkstr-r (cons shen.proc-nl (cons V2401 ())) V2402))))

(defun shen.mkstr-l (V2403 V2404) (cond ((= () V2404) V2403) ((cons? V2404) (shen.mkstr-l (shen.insert-l (hd V2404) V2403) (tl V2404))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V2407 V2408) (cond ((= "" V2408) "") ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "A" (pos (tlstr V2408) 0))))) (cons shen.app (cons V2407 (cons (tlstr (tlstr V2408)) (cons shen.a ()))))) ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "R" (pos (tlstr V2408) 0))))) (cons shen.app (cons V2407 (cons (tlstr (tlstr V2408)) (cons shen.r ()))))) ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "S" (pos (tlstr V2408) 0))))) (cons shen.app (cons V2407 (cons (tlstr (tlstr V2408)) (cons shen.s ()))))) ((shen.+string? V2408) (shen.factor-cn (cons cn (cons (pos V2408 0) (cons (shen.insert-l V2407 (tlstr V2408)) ()))))) ((and (cons? V2408) (and (= cn (hd V2408)) (and (cons? (tl V2408)) (and (cons? (tl (tl V2408))) (= () (tl (tl (tl V2408)))))))) (cons cn (cons (hd (tl V2408)) (cons (shen.insert-l V2407 (hd (tl (tl V2408)))) ())))) ((and (cons? V2408) (and (= shen.app (hd V2408)) (and (cons? (tl V2408)) (and (cons? (tl (tl V2408))) (and (cons? (tl (tl (tl V2408)))) (= () (tl (tl (tl (tl V2408)))))))))) (cons shen.app (cons (hd (tl V2408)) (cons (shen.insert-l V2407 (hd (tl (tl V2408)))) (tl (tl (tl V2408))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V2409) (cond ((and (cons? V2409) (and (= cn (hd V2409)) (and (cons? (tl V2409)) (and (cons? (tl (tl V2409))) (and (cons? (hd (tl (tl V2409)))) (and (= cn (hd (hd (tl (tl V2409))))) (and (cons? (tl (hd (tl (tl V2409))))) (and (cons? (tl (tl (hd (tl (tl V2409)))))) (and (= () (tl (tl (tl (hd (tl (tl V2409))))))) (and (= () (tl (tl (tl V2409)))) (and (string? (hd (tl V2409))) (string? (hd (tl (hd (tl (tl V2409))))))))))))))))) (cons cn (cons (cn (hd (tl V2409)) (hd (tl (hd (tl (tl V2409)))))) (tl (tl (hd (tl (tl V2409)))))))) (true V2409)))

(defun shen.proc-nl (V2410) (cond ((= "" V2410) "") ((and (shen.+string? V2410) (and (= "~" (pos V2410 0)) (and (shen.+string? (tlstr V2410)) (= "%" (pos (tlstr V2410) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V2410))))) ((shen.+string? V2410) (cn (pos V2410 0) (shen.proc-nl (tlstr V2410)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V2411 V2412) (cond ((= () V2412) V2411) ((cons? V2412) (shen.mkstr-r (cons shen.insert (cons (hd V2412) (cons V2411 ()))) (tl V2412))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V2413 V2414) (shen.insert-h V2413 V2414 ""))

(defun shen.insert-h (V2417 V2418 V2419) (cond ((= "" V2418) V2419) ((and (shen.+string? V2418) (and (= "~" (pos V2418 0)) (and (shen.+string? (tlstr V2418)) (= "A" (pos (tlstr V2418) 0))))) (cn V2419 (shen.app V2417 (tlstr (tlstr V2418)) shen.a))) ((and (shen.+string? V2418) (and (= "~" (pos V2418 0)) (and (shen.+string? (tlstr V2418)) (= "R" (pos (tlstr V2418) 0))))) (cn V2419 (shen.app V2417 (tlstr (tlstr V2418)) shen.r))) ((and (shen.+string? V2418) (and (= "~" (pos V2418 0)) (and (shen.+string? (tlstr V2418)) (= "S" (pos (tlstr V2418) 0))))) (cn V2419 (shen.app V2417 (tlstr (tlstr V2418)) shen.s))) ((shen.+string? V2418) (shen.insert-h V2417 (tlstr V2418) (cn V2419 (pos V2418 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V2420 V2421 V2422) (cn (shen.arg->str V2420 V2422) V2421))

(defun shen.arg->str (V2428 V2429) (cond ((= V2428 (fail)) "...") ((shen.list? V2428) (shen.list->str V2428 V2429)) ((string? V2428) (shen.str->str V2428 V2429)) ((absvector? V2428) (shen.vector->str V2428 V2429)) (true (shen.atom->str V2428))))

(defun shen.list->str (V2430 V2431) (cond ((= shen.r V2431) (@s "(" (@s (shen.iter-list V2430 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V2430 V2431 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V2442 V2443 V2444) (cond ((= () V2442) "") ((= 0 V2444) "... etc") ((and (cons? V2442) (= () (tl V2442))) (shen.arg->str (hd V2442) V2443)) ((cons? V2442) (@s (shen.arg->str (hd V2442) V2443) (@s " " (shen.iter-list (tl V2442) V2443 (- V2444 1))))) (true (@s "|" (@s " " (shen.arg->str V2442 V2443))))))

(defun shen.str->str (V2449 V2450) (cond ((= shen.a V2450) V2449) (true (@s (n->string 34) (@s V2449 (n->string 34))))))

(defun shen.vector->str (V2451 V2452) (if (shen.print-vector? V2451) ((<-address V2451 0) V2451) (if (vector? V2451) (@s "<" (@s (shen.iter-vector V2451 1 V2452 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V2451 0 V2452 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V2453) (let Zero (<-address V2453 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V2454) (trap-error (do (ps V2454) true) (lambda E false)))

(defun shen.tuple (V2455) (cn "(@p " (shen.app (<-address V2455 1) (cn " " (shen.app (<-address V2455 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V2462 V2463 V2464 V2465) (cond ((= 0 V2465) "... etc") (true (let Item (trap-error (<-address V2462 V2463) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V2462 (+ V2463 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V2464) (@s (shen.arg->str Item V2464) (@s " " (shen.iter-vector V2462 (+ V2463 1) V2464 (- V2465 1)))))))))))

(defun shen.atom->str (V2466) (trap-error (str V2466) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V2467) (or (empty? V2467) (cons? V2467)))



