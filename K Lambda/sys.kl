"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun thaw (V1483) (V1483))

(defun eval (V1484) (let Macroexpand (shen.walk (lambda V1477 (macroexpand V1477)) V1484) (if (shen.packaged? Macroexpand) (map (lambda V1478 (shen.eval-without-macros V1478)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V1485) (eval-kl (shen.elim-def (shen.proc-input+ V1485))))

(defun shen.proc-input+ (V1486) (cond ((and (cons? V1486) (and (= input+ (hd V1486)) (and (cons? (tl V1486)) (and (cons? (tl (tl V1486))) (= () (tl (tl (tl V1486)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V1486))) (tl (tl V1486))))) ((and (cons? V1486) (and (= shen.read+ (hd V1486)) (and (cons? (tl V1486)) (and (cons? (tl (tl V1486))) (= () (tl (tl (tl V1486)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V1486))) (tl (tl V1486))))) ((cons? V1486) (map (lambda V1479 (shen.proc-input+ V1479)) V1486)) (true V1486)))

(defun shen.elim-def (V1487) (cond ((and (cons? V1487) (and (= define (hd V1487)) (cons? (tl V1487)))) (shen.shen->kl (hd (tl V1487)) (tl (tl V1487)))) ((and (cons? V1487) (and (= defmacro (hd V1487)) (cons? (tl V1487)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V1487)) (append (tl (tl V1487)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V1487))) Def)))) ((and (cons? V1487) (and (= defcc (hd V1487)) (cons? (tl V1487)))) (shen.elim-def (shen.yacc V1487))) ((cons? V1487) (map (lambda V1480 (shen.elim-def V1480)) V1487)) (true V1487)))

(defun shen.add-macro (V1488) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V1488 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (lambda V1481 (V1488 V1481)) (value *macros*)))))))

(defun shen.packaged? (V1495) (cond ((and (cons? V1495) (and (= package (hd V1495)) (and (cons? (tl V1495)) (cons? (tl (tl V1495)))))) true) (true false)))

(defun external (V1496) (trap-error (get V1496 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V1496 " has not been used.
" shen.a))))))

(defun shen.package-contents (V1499) (cond ((and (cons? V1499) (and (= package (hd V1499)) (and (cons? (tl V1499)) (and (= null (hd (tl V1499))) (cons? (tl (tl V1499))))))) (tl (tl (tl V1499)))) ((and (cons? V1499) (and (= package (hd V1499)) (and (cons? (tl V1499)) (cons? (tl (tl V1499)))))) (shen.packageh (hd (tl V1499)) (hd (tl (tl V1499))) (tl (tl (tl V1499))))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V1500 V1501) (cond ((cons? V1501) (V1500 (map (lambda Z (shen.walk V1500 Z)) V1501))) (true (V1500 V1501))))

(defun compile (V1502 V1503 V1504) (let O (V1502 (cons V1503 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V1504 O) (shen.hdtl O))))

(defun fail-if (V1505 V1506) (if (V1505 V1506) (fail) V1506))

(defun @s (V1507 V1508) (cn V1507 V1508))

(defun tc? () (value shen.*tc*))

(defun ps (V1509) (trap-error (get V1509 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V1509 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun shen.+vector? (V1510) (and (absvector? V1510) (> (<-address V1510 0) 0)))

(defun vector (V1511) (let Vector (absvector (+ V1511 1)) (let ZeroStamp (address-> Vector 0 V1511) (let Standard (if (= V1511 0) ZeroStamp (shen.fillvector ZeroStamp 1 V1511 (fail))) Standard))))

(defun shen.fillvector (V1513 V1514 V1515 V1516) (cond ((= V1515 V1514) (address-> V1513 V1515 V1516)) (true (shen.fillvector (address-> V1513 V1514 V1516) (+ 1 V1514) V1515 V1516))))

(defun vector? (V1517) (and (absvector? V1517) (trap-error (>= (<-address V1517 0) 0) (lambda E false))))

(defun vector-> (V1518 V1519 V1520) (if (= V1519 0) (simple-error "cannot access 0th element of a vector
") (address-> V1518 V1519 V1520)))

(defun <-vector (V1521 V1522) (if (= V1522 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V1521 V1522) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V1523) (and (integer? V1523) (>= V1523 0)))

(defun limit (V1524) (<-address V1524 0))

(defun symbol? (V1525) (cond ((or (boolean? V1525) (or (number? V1525) (string? V1525))) false) (true (trap-error (let String (str V1525) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V1526) (cond ((shen.+string? V1526) (and (shen.alpha? (pos V1526 0)) (shen.alphanums? (tlstr V1526)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V1527) (element? V1527 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V1528) (cond ((= "" V1528) true) ((shen.+string? V1528) (and (shen.alphanum? (pos V1528 0)) (shen.alphanums? (tlstr V1528)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V1529) (or (shen.alpha? V1529) (shen.digit? V1529)))

(defun shen.digit? (V1530) (element? V1530 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V1531) (cond ((or (boolean? V1531) (or (number? V1531) (string? V1531))) false) (true (trap-error (let String (str V1531) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V1532) (cond ((shen.+string? V1532) (and (shen.uppercase? (pos V1532 0)) (shen.alphanums? (tlstr V1532)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V1533) (element? V1533 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V1534) (concat V1534 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V1535 V1536) (intern (cn (str V1535) (str V1536))))

(defun @p (V1537 V1538) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V1537) (let Snd (address-> Vector 2 V1538) Vector)))))

(defun fst (V1539) (<-address V1539 1))

(defun snd (V1540) (<-address V1540 2))

(defun tuple? (V1541) (trap-error (and (absvector? V1541) (= shen.tuple (<-address V1541 0))) (lambda E false)))

(defun append (V1542 V1543) (cond ((= () V1542) V1543) ((cons? V1542) (cons (hd V1542) (append (tl V1542) V1543))) (true (shen.f_error append))))

(defun @v (V1544 V1545) (let Limit (limit V1545) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V1544) (if (= Limit 0) X+NewVector (shen.@v-help V1545 1 Limit X+NewVector))))))

(defun shen.@v-help (V1547 V1548 V1549 V1550) (cond ((= V1549 V1548) (shen.copyfromvector V1547 V1550 V1549 (+ V1549 1))) (true (shen.@v-help V1547 (+ V1548 1) V1549 (shen.copyfromvector V1547 V1550 V1548 (+ V1548 1))))))

(defun shen.copyfromvector (V1551 V1552 V1553 V1554) (trap-error (vector-> V1552 V1554 (<-vector V1551 V1553)) (lambda E V1552)))

(defun hdv (V1555) (trap-error (<-vector V1555 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V1555 "
" shen.s))))))

(defun tlv (V1556) (let Limit (limit V1556) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V1556 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V1558 V1559 V1560 V1561) (cond ((= V1560 V1559) (shen.copyfromvector V1558 V1561 V1560 (- V1560 1))) (true (shen.tlv-help V1558 (+ V1559 1) V1560 (shen.copyfromvector V1558 V1561 V1559 (- V1559 1))))))

(defun assoc (V1571 V1572) (cond ((= () V1572) ()) ((and (cons? V1572) (and (cons? (hd V1572)) (= (hd (hd V1572)) V1571))) (hd V1572)) ((cons? V1572) (assoc V1571 (tl V1572))) (true (shen.f_error assoc))))

(defun boolean? (V1577) (cond ((= true V1577) true) ((= false V1577) true) (true false)))

(defun nl (V1578) (cond ((= 0 V1578) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V1578 1))))))

(defun difference (V1581 V1582) (cond ((= () V1581) ()) ((cons? V1581) (if (element? (hd V1581) V1582) (difference (tl V1581) V1582) (cons (hd V1581) (difference (tl V1581) V1582)))) (true (shen.f_error difference))))

(defun do (V1583 V1584) V1584)

(defun element? (V1594 V1595) (cond ((= () V1595) false) ((and (cons? V1595) (= (hd V1595) V1594)) true) ((cons? V1595) (element? V1594 (tl V1595))) (true (shen.f_error element?))))

(defun empty? (V1600) (cond ((= () V1600) true) (true false)))

(defun fix (V1601 V1602) (shen.fix-help V1601 V1602 (V1601 V1602)))

(defun shen.fix-help (V1610 V1611 V1612) (cond ((= V1612 V1611) V1612) (true (shen.fix-help V1610 V1612 (V1610 V1612)))))

(defun put (V1613 V1614 V1615 V1616) (let N (hash V1613 (limit V1616)) (let Entry (trap-error (<-vector V1616 N) (lambda E ())) (let Change (vector-> V1616 N (shen.change-pointer-value V1613 V1614 V1615 Entry)) V1615))))

(defun unput (V1617 V1618 V1619) (let N (hash V1617 (limit V1619)) (let Entry (trap-error (<-vector V1619 N) (lambda E ())) (let Change (vector-> V1619 N (shen.remove-pointer V1617 V1618 Entry)) V1617))))

(defun shen.remove-pointer (V1624 V1625 V1626) (cond ((= () V1626) ()) ((and (cons? V1626) (and (cons? (hd V1626)) (and (cons? (hd (hd V1626))) (and (cons? (tl (hd (hd V1626)))) (and (= () (tl (tl (hd (hd V1626))))) (and (= (hd (tl (hd (hd V1626)))) V1625) (= (hd (hd (hd V1626))) V1624))))))) (tl V1626)) ((cons? V1626) (cons (hd V1626) (shen.remove-pointer V1624 V1625 (tl V1626)))) (true (shen.f_error shen.remove-pointer))))

(defun shen.change-pointer-value (V1631 V1632 V1633 V1634) (cond ((= () V1634) (cons (cons (cons V1631 (cons V1632 ())) V1633) ())) ((and (cons? V1634) (and (cons? (hd V1634)) (and (cons? (hd (hd V1634))) (and (cons? (tl (hd (hd V1634)))) (and (= () (tl (tl (hd (hd V1634))))) (and (= (hd (tl (hd (hd V1634)))) V1632) (= (hd (hd (hd V1634))) V1631))))))) (cons (cons (hd (hd V1634)) V1633) (tl V1634))) ((cons? V1634) (cons (hd V1634) (shen.change-pointer-value V1631 V1632 V1633 (tl V1634)))) (true (shen.f_error shen.change-pointer-value))))

(defun get (V1635 V1636 V1637) (let N (hash V1635 (limit V1637)) (let Entry (trap-error (<-vector V1637 N) (lambda E (simple-error "pointer not found
"))) (let Result (assoc (cons V1635 (cons V1636 ())) Entry) (if (empty? Result) (simple-error "value not found
") (tl Result))))))

(defun hash (V1638 V1639) (let Hash (shen.mod (sum (map (lambda V1482 (string->n V1482)) (explode V1638))) V1639) (if (= 0 Hash) 1 Hash)))

(defun shen.mod (V1640 V1641) (shen.modh V1640 (shen.multiples V1640 (cons V1641 ()))))

(defun shen.multiples (V1642 V1643) (cond ((and (cons? V1643) (> (hd V1643) V1642)) (tl V1643)) ((cons? V1643) (shen.multiples V1642 (cons (* 2 (hd V1643)) V1643))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V1646 V1647) (cond ((= 0 V1646) 0) ((= () V1647) V1646) ((and (cons? V1647) (> (hd V1647) V1646)) (if (empty? (tl V1647)) V1646 (shen.modh V1646 (tl V1647)))) ((cons? V1647) (shen.modh (- V1646 (hd V1647)) V1647)) (true (shen.f_error shen.modh))))

(defun sum (V1648) (cond ((= () V1648) 0) ((cons? V1648) (+ (hd V1648) (sum (tl V1648)))) (true (shen.f_error sum))))

(defun head (V1655) (cond ((cons? V1655) (hd V1655)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V1662) (cond ((cons? V1662) (tl V1662)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V1663) (pos V1663 0))

(defun intersection (V1666 V1667) (cond ((= () V1666) ()) ((cons? V1666) (if (element? (hd V1666) V1667) (cons (hd V1666) (intersection (tl V1666) V1667)) (intersection (tl V1666) V1667))) (true (shen.f_error intersection))))

(defun reverse (V1668) (shen.reverse_help V1668 ()))

(defun shen.reverse_help (V1669 V1670) (cond ((= () V1669) V1670) ((cons? V1669) (shen.reverse_help (tl V1669) (cons (hd V1669) V1670))) (true (shen.f_error shen.reverse_help))))

(defun union (V1671 V1672) (cond ((= () V1671) V1672) ((cons? V1671) (if (element? (hd V1671) V1672) (union (tl V1671) V1672) (cons (hd V1671) (union (tl V1671) V1672)))) (true (shen.f_error union))))

(defun y-or-n? (V1673) (let Message (shen.prhush (shen.proc-nl V1673) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V1673))))))))

(defun not (V1674) (if V1674 false true))

(defun subst (V1684 V1685 V1686) (cond ((= V1686 V1685) V1684) ((cons? V1686) (map (lambda W (subst V1684 V1685 W)) V1686)) (true V1686)))

(defun explode (V1687) (shen.explode-h (shen.app V1687 "" shen.a)))

(defun shen.explode-h (V1688) (cond ((= "" V1688) ()) ((shen.+string? V1688) (cons (pos V1688 0) (shen.explode-h (tlstr V1688)))) (true (shen.f_error shen.explode-h))))

(defun cd (V1689) (set *home-directory* (if (= V1689 "") "" (shen.app V1689 "/" shen.a))))

(defun map (V1690 V1691) (shen.map-h V1690 V1691 ()))

(defun shen.map-h (V1694 V1695 V1696) (cond ((= () V1695) (reverse V1696)) ((cons? V1695) (shen.map-h V1694 (tl V1695) (cons (V1694 (hd V1695)) V1696))) (true (shen.f_error shen.map-h))))

(defun length (V1697) (shen.length-h V1697 0))

(defun shen.length-h (V1698 V1699) (cond ((= () V1698) V1699) (true (shen.length-h (tl V1698) (+ V1699 1)))))

(defun occurrences (V1709 V1710) (cond ((= V1710 V1709) 1) ((cons? V1710) (+ (occurrences V1709 (hd V1710)) (occurrences V1709 (tl V1710)))) (true 0)))

(defun nth (V1717 V1718) (cond ((and (= 1 V1717) (cons? V1718)) (hd V1718)) ((cons? V1718) (nth (- V1717 1) (tl V1718))) (true (shen.f_error nth))))

(defun integer? (V1719) (and (number? V1719) (let Abs (shen.abs V1719) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V1720) (if (> V1720 0) V1720 (- 0 V1720)))

(defun shen.magless (V1721 V1722) (let Nx2 (* V1722 2) (if (> Nx2 V1721) V1722 (shen.magless V1721 Nx2))))

(defun shen.integer-test? (V1726 V1727) (cond ((= 0 V1726) true) ((> 1 V1726) false) (true (let Abs-N (- V1726 V1727) (if (> 0 Abs-N) (integer? V1726) (shen.integer-test? Abs-N V1727))))))

(defun mapcan (V1730 V1731) (cond ((= () V1731) ()) ((cons? V1731) (append (V1730 (hd V1731)) (mapcan V1730 (tl V1731)))) (true (shen.f_error mapcan))))

(defun == (V1741 V1742) (cond ((= V1742 V1741) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V1743) (and (symbol? V1743) (let Val (trap-error (value V1743) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V1744) (cond ((= "" V1744) ()) (true (cons (string->n (pos V1744 0)) (shen.string->bytes (tlstr V1744))))))

(defun maxinferences (V1745) (set shen.*maxinferences* V1745))

(defun inferences () (value shen.*infs*))

(defun protect (V1746) V1746)

(defun stoutput () (value *stoutput*))

(defun string->symbol (V1747) (let Symbol (intern V1747) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V1747 " to a symbol" shen.s))))))

(defun optimise (V1752) (cond ((= + V1752) (set shen.*optimise* true)) ((= - V1752) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V1753) (trap-error (do (external V1753) true) (lambda E false)))



