"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-file-as-bytelist (V1216) (let Stream (open V1216 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))

(defun shen.read-file-as-bytelist-help (V1217 V1218 V1219) (cond ((= -1 V1218) V1219) (true (shen.read-file-as-bytelist-help V1217 (read-byte V1217) (cons V1218 V1219)))))

(defun read-file-as-string (V1220) (let Stream (open V1220 in) (shen.rfas-h Stream (read-byte Stream) "")))

(defun shen.rfas-h (V1221 V1222 V1223) (cond ((= -1 V1222) (do (close V1221) V1223)) (true (shen.rfas-h V1221 (read-byte V1221) (cn V1223 (n->string V1222))))))

(defun input (V1224) (eval-kl (read V1224)))

(defun input+ (V1225 V1226) (let Mono? (shen.monotype V1225) (let Input (read V1226) (if (= false (shen.typecheck Input (shen.demodulate V1225))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1225 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1227) (cond ((cons? V1227) (map (lambda V1205 (shen.monotype V1205)) V1227)) (true (if (variable? V1227) (simple-error (cn "input+ expects a monotype: not " (shen.app V1227 "
" shen.a))) V1227))))

(defun read (V1228) (hd (shen.read-loop V1228 (read-byte V1228) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V1233 V1234 V1235) (cond ((= 94 V1234) (simple-error "read aborted")) ((= -1 V1234) (if (empty? V1235) (simple-error "error: empty stream") (compile (lambda V1206 (shen.<st_input> V1206)) V1235 (lambda E E)))) ((shen.terminator? V1234) (let AllBytes (append V1235 (cons V1234 ())) (let It (shen.record-it AllBytes) (let Read (compile (lambda V1207 (shen.<st_input> V1207)) AllBytes (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1233 (read-byte V1233) AllBytes) Read))))) (true (shen.read-loop V1233 (read-byte V1233) (append V1235 (cons V1234 ()))))))

(defun shen.terminator? (V1236) (element? V1236 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1237) (shen.lineread-loop (read-byte V1237) () V1237))

(defun shen.lineread-loop (V1239 V1240 V1241) (cond ((= -1 V1239) (if (empty? V1240) (simple-error "empty stream") (compile (lambda V1208 (shen.<st_input> V1208)) V1240 (lambda E E)))) ((= V1239 (shen.hat)) (simple-error "line read aborted")) ((element? V1239 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda V1209 (shen.<st_input> V1209)) V1240 (lambda E shen.nextline)) (let It (shen.record-it V1240) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-byte V1241) (append V1240 (cons V1239 ())) V1241) Line)))) (true (shen.lineread-loop (read-byte V1241) (append V1240 (cons V1239 ())) V1241))))

(defun shen.record-it (V1242) (let TrimLeft (shen.trim-whitespace V1242) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V1243) (cond ((and (cons? V1243) (element? (hd V1243) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V1243))) (true V1243)))

(defun shen.record-it-h (V1244) (do (set shen.*it* (shen.cn-all (map (lambda V1210 (n->string V1210)) V1244))) V1244))

(defun shen.cn-all (V1245) (cond ((= () V1245) "") ((cons? V1245) (cn (hd V1245) (shen.cn-all (tl V1245)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V1246) (let Bytelist (read-file-as-bytelist V1246) (compile (lambda V1212 (shen.<st_input> V1212)) Bytelist (lambda V1211 (shen.read-error V1211)))))

(defun read-from-string (V1247) (let Ns (map (lambda V1213 (string->n V1213)) (explode V1247)) (compile (lambda V1215 (shen.<st_input> V1215)) Ns (lambda V1214 (shen.read-error V1214)))))

(defun shen.read-error (V1254) (cond ((and (cons? V1254) (and (cons? (hd V1254)) (and (cons? (tl V1254)) (= () (tl (tl V1254)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1254)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1259 V1260) (cond ((= () V1260) "") ((= 0 V1259) "") ((cons? V1260) (cn (n->string (hd V1260)) (shen.compress-50 (- V1259 1) (tl V1260)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V1261) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V1261) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V1261) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V1261) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V1261) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V1261) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V1261) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1261) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1261) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1261) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V1261) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1261) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V1261) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V1261) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1261) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V1262) (if (and (cons? (hd V1262)) (= 91 (hd (hd V1262)))) (shen.pair (hd (shen.pair (tl (hd V1262)) (shen.hdtl V1262))) shen.skip) (fail)))

(defun shen.<rsb> (V1263) (if (and (cons? (hd V1263)) (= 93 (hd (hd V1263)))) (shen.pair (hd (shen.pair (tl (hd V1263)) (shen.hdtl V1263))) shen.skip) (fail)))

(defun shen.<lcurly> (V1264) (if (and (cons? (hd V1264)) (= 123 (hd (hd V1264)))) (shen.pair (hd (shen.pair (tl (hd V1264)) (shen.hdtl V1264))) shen.skip) (fail)))

(defun shen.<rcurly> (V1265) (if (and (cons? (hd V1265)) (= 125 (hd (hd V1265)))) (shen.pair (hd (shen.pair (tl (hd V1265)) (shen.hdtl V1265))) shen.skip) (fail)))

(defun shen.<bar> (V1266) (if (and (cons? (hd V1266)) (= 124 (hd (hd V1266)))) (shen.pair (hd (shen.pair (tl (hd V1266)) (shen.hdtl V1266))) shen.skip) (fail)))

(defun shen.<semicolon> (V1267) (if (and (cons? (hd V1267)) (= 59 (hd (hd V1267)))) (shen.pair (hd (shen.pair (tl (hd V1267)) (shen.hdtl V1267))) shen.skip) (fail)))

(defun shen.<colon> (V1268) (if (and (cons? (hd V1268)) (= 58 (hd (hd V1268)))) (shen.pair (hd (shen.pair (tl (hd V1268)) (shen.hdtl V1268))) shen.skip) (fail)))

(defun shen.<comma> (V1269) (if (and (cons? (hd V1269)) (= 44 (hd (hd V1269)))) (shen.pair (hd (shen.pair (tl (hd V1269)) (shen.hdtl V1269))) shen.skip) (fail)))

(defun shen.<equal> (V1270) (if (and (cons? (hd V1270)) (= 61 (hd (hd V1270)))) (shen.pair (hd (shen.pair (tl (hd V1270)) (shen.hdtl V1270))) shen.skip) (fail)))

(defun shen.<minus> (V1271) (if (and (cons? (hd V1271)) (= 45 (hd (hd V1271)))) (shen.pair (hd (shen.pair (tl (hd V1271)) (shen.hdtl V1271))) shen.skip) (fail)))

(defun shen.<lrb> (V1272) (if (and (cons? (hd V1272)) (= 40 (hd (hd V1272)))) (shen.pair (hd (shen.pair (tl (hd V1272)) (shen.hdtl V1272))) shen.skip) (fail)))

(defun shen.<rrb> (V1273) (if (and (cons? (hd V1273)) (= 41 (hd (hd V1273)))) (shen.pair (hd (shen.pair (tl (hd V1273)) (shen.hdtl V1273))) shen.skip) (fail)))

(defun shen.<atom> (V1274) (let YaccParse (let Parse_shen.<str> (shen.<str> V1274) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V1274) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V1274) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V1275) (cond ((= () V1275) "") ((and (cons? V1275) (and (= "c" (hd V1275)) (and (cons? (tl V1275)) (= "#" (hd (tl V1275)))))) (let CodePoint (shen.code-point (tl (tl V1275))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1275))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1275) (@s (hd V1275) (shen.control-chars (tl V1275)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V1278) (cond ((and (cons? V1278) (= ";" (hd V1278))) "") ((and (cons? V1278) (element? (hd V1278) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1278) (shen.code-point (tl V1278)))) (true (simple-error (cn "code point parse error " (shen.app V1278 "
" shen.a))))))

(defun shen.after-codepoint (V1283) (cond ((= () V1283) ()) ((and (cons? V1283) (= ";" (hd V1283))) (tl V1283)) ((cons? V1283) (shen.after-codepoint (tl V1283))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V1284) (shen.pre (reverse (shen.digits->integers V1284)) 0))

(defun shen.digits->integers (V1289) (cond ((and (cons? V1289) (= "0" (hd V1289))) (cons 0 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "1" (hd V1289))) (cons 1 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "2" (hd V1289))) (cons 2 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "3" (hd V1289))) (cons 3 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "4" (hd V1289))) (cons 4 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "5" (hd V1289))) (cons 5 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "6" (hd V1289))) (cons 6 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "7" (hd V1289))) (cons 7 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "8" (hd V1289))) (cons 8 (shen.digits->integers (tl V1289)))) ((and (cons? V1289) (= "9" (hd V1289))) (cons 9 (shen.digits->integers (tl V1289)))) (true ())))

(defun shen.<sym> (V1290) (let Parse_shen.<alpha> (shen.<alpha> V1290) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V1291) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V1291) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1291) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V1292) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V1292) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V1292) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V1293) (if (cons? (hd V1293)) (let Parse_Byte (hd (hd V1293)) (if (shen.numbyte? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1293)) (shen.hdtl V1293))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.numbyte? (V1298) (cond ((= 48 V1298) true) ((= 49 V1298) true) ((= 50 V1298) true) ((= 51 V1298) true) ((= 52 V1298) true) ((= 53 V1298) true) ((= 54 V1298) true) ((= 55 V1298) true) ((= 56 V1298) true) ((= 57 V1298) true) (true false)))

(defun shen.<alpha> (V1299) (if (cons? (hd V1299)) (let Parse_Byte (hd (hd V1299)) (if (shen.symbol-code? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1299)) (shen.hdtl V1299))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.symbol-code? (V1300) (or (= V1300 126) (or (and (> V1300 94) (< V1300 123)) (or (and (> V1300 59) (< V1300 91)) (or (and (> V1300 41) (and (< V1300 58) (not (= V1300 44)))) (or (and (> V1300 34) (< V1300 40)) (= V1300 33)))))))

(defun shen.<str> (V1301) (let Parse_shen.<dbq> (shen.<dbq> V1301) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V1302) (if (cons? (hd V1302)) (let Parse_Byte (hd (hd V1302)) (if (= Parse_Byte 34) (shen.pair (hd (shen.pair (tl (hd V1302)) (shen.hdtl V1302))) Parse_Byte) (fail))) (fail)))

(defun shen.<strcontents> (V1303) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V1303) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1303) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V1304) (if (cons? (hd V1304)) (let Parse_Byte (hd (hd V1304)) (shen.pair (hd (shen.pair (tl (hd V1304)) (shen.hdtl V1304))) (n->string Parse_Byte))) (fail)))

(defun shen.<strc> (V1305) (if (cons? (hd V1305)) (let Parse_Byte (hd (hd V1305)) (if (not (= Parse_Byte 34)) (shen.pair (hd (shen.pair (tl (hd V1305)) (shen.hdtl V1305))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.<number> (V1306) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1306) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V1306) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1306) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1306) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1306) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1306) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V1307) (if (and (cons? (hd V1307)) (= 101 (hd (hd V1307)))) (shen.pair (hd (shen.pair (tl (hd V1307)) (shen.hdtl V1307))) shen.skip) (fail)))

(defun shen.<log10> (V1308) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1308) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1308) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V1309) (if (cons? (hd V1309)) (let Parse_Byte (hd (hd V1309)) (if (= Parse_Byte 43) (shen.pair (hd (shen.pair (tl (hd V1309)) (shen.hdtl V1309))) Parse_Byte) (fail))) (fail)))

(defun shen.<stop> (V1310) (if (cons? (hd V1310)) (let Parse_Byte (hd (hd V1310)) (if (= Parse_Byte 46) (shen.pair (hd (shen.pair (tl (hd V1310)) (shen.hdtl V1310))) Parse_Byte) (fail))) (fail)))

(defun shen.<predigits> (V1311) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1311) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1311) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V1312) (let Parse_shen.<digits> (shen.<digits> V1312) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V1313) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V1313) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V1313) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V1314) (if (cons? (hd V1314)) (let Parse_X (hd (hd V1314)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1314)) (shen.hdtl V1314))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V1315) (cond ((= 48 V1315) 0) ((= 49 V1315) 1) ((= 50 V1315) 2) ((= 51 V1315) 3) ((= 52 V1315) 4) ((= 53 V1315) 5) ((= 54 V1315) 6) ((= 55 V1315) 7) ((= 56 V1315) 8) ((= 57 V1315) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V1318 V1319) (cond ((= () V1318) 0) ((cons? V1318) (+ (* (shen.expt 10 V1319) (hd V1318)) (shen.pre (tl V1318) (+ V1319 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V1322 V1323) (cond ((= () V1322) 0) ((cons? V1322) (+ (* (shen.expt 10 (- 0 V1323)) (hd V1322)) (shen.post (tl V1322) (+ V1323 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V1326 V1327) (cond ((= 0 V1327) 1) ((> V1327 0) (* V1326 (shen.expt V1326 (- V1327 1)))) (true (* 1.0 (/ (shen.expt V1326 (+ V1327 1)) V1326)))))

(defun shen.<st_input1> (V1328) (let Parse_shen.<st_input> (shen.<st_input> V1328) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V1329) (let Parse_shen.<st_input> (shen.<st_input> V1329) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V1330) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V1330) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V1330) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V1331) (let Parse_shen.<backslash> (shen.<backslash> V1331) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V1332) (if (and (cons? (hd V1332)) (= 92 (hd (hd V1332)))) (shen.pair (hd (shen.pair (tl (hd V1332)) (shen.hdtl V1332))) shen.skip) (fail)))

(defun shen.<anysingle> (V1333) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V1333) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1333) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V1334) (if (cons? (hd V1334)) (let Parse_X (hd (hd V1334)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V1334)) (shen.hdtl V1334))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V1335) (if (cons? (hd V1335)) (let Parse_X (hd (hd V1335)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V1335)) (shen.hdtl V1335))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V1336) (let Parse_shen.<backslash> (shen.<backslash> V1336) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V1337) (if (and (cons? (hd V1337)) (= 42 (hd (hd V1337)))) (shen.pair (hd (shen.pair (tl (hd V1337)) (shen.hdtl V1337))) shen.skip) (fail)))

(defun shen.<anymulti> (V1338) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1338) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V1338) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V1338)) (let Parse_X (hd (hd V1338)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V1338)) (shen.hdtl V1338))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V1339) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V1339) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V1339) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V1340) (if (cons? (hd V1340)) (let Parse_X (hd (hd V1340)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V1340)) (shen.hdtl V1340))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V1341) (cond ((= () V1341) ()) ((and (cons? V1341) (and (cons? (tl V1341)) (and (cons? (tl (tl V1341))) (and (= () (tl (tl (tl V1341)))) (= (hd (tl V1341)) bar!))))) (cons cons (cons (hd V1341) (tl (tl V1341))))) ((cons? V1341) (cons cons (cons (hd V1341) (cons (shen.cons_form (tl V1341)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V1344 V1345) (cond ((and (cons? V1344) (and (= $ (hd V1344)) (and (cons? (tl V1344)) (= () (tl (tl V1344)))))) (append (explode (hd (tl V1344))) V1345)) ((and (cons? V1344) (and (= package (hd V1344)) (and (cons? (tl V1344)) (and (= null (hd (tl V1344))) (cons? (tl (tl V1344))))))) (append (tl (tl (tl V1344))) V1345)) ((and (cons? V1344) (and (= package (hd V1344)) (and (cons? (tl V1344)) (cons? (tl (tl V1344)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1344)))) (let Record (shen.record-exceptions ListofExceptions (hd (tl V1344))) (let PackageNameDot (intern (cn (str (hd (tl V1344))) ".")) (append (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1344)))) V1345))))) (true (cons V1344 V1345))))

(defun shen.record-exceptions (V1346 V1347) (let CurrExceptions (trap-error (get V1347 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V1346 CurrExceptions) (put V1347 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.packageh (V1356 V1357 V1358) (cond ((cons? V1358) (cons (shen.packageh V1356 V1357 (hd V1358)) (shen.packageh V1356 V1357 (tl V1358)))) ((or (shen.sysfunc? V1358) (or (variable? V1358) (or (element? V1358 V1357) (or (shen.doubleunderline? V1358) (shen.singleunderline? V1358))))) V1358) ((and (symbol? V1358) (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) (explode V1358)))) (concat V1356 V1358)) (true V1358)))



