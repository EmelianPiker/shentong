"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V837) (let Parse_shen.<predicate*> (shen.<predicate*> V837) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V844 V845) (cond ((and (cons? V845) (and (cons? (tl V845)) (= () (tl (tl V845))))) (simple-error (cn "prolog syntax error in " (shen.app V844 (cn " here:

 " (shen.app (shen.next-50 50 (hd V845)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V844 "
" shen.a))))))

(defun shen.next-50 (V850 V851) (cond ((= () V851) "") ((= 0 V850) "") ((cons? V851) (cn (shen.decons-string (hd V851)) (shen.next-50 (- V850 1) (tl V851)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V852) (cond ((and (cons? V852) (and (= cons (hd V852)) (and (cons? (tl V852)) (and (cons? (tl (tl V852))) (= () (tl (tl (tl V852)))))))) (shen.app (shen.eval-cons V852) " " shen.s)) (true (shen.app V852 " " shen.r))))

(defun shen.insert-predicate (V853 V854) (cond ((and (cons? V854) (and (cons? (tl V854)) (= () (tl (tl V854))))) (cons (cons V853 (hd V854)) (cons :- (tl V854)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V855) (if (cons? (hd V855)) (let Parse_X (hd (hd V855)) (shen.pair (hd (shen.pair (tl (hd V855)) (shen.hdtl V855))) Parse_X)) (fail)))

(defun shen.<clauses*> (V856) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V856) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V856) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V857) (let Parse_shen.<head*> (shen.<head*> V857) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V858) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V858) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V858) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V859) (if (cons? (hd V859)) (let Parse_X (hd (hd V859)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V859)) (shen.hdtl V859))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V864) (cond ((and (cons? V864) (and (= cons (hd V864)) (and (cons? (tl V864)) (and (cons? (tl (tl V864))) (= () (tl (tl (tl V864)))))))) (and (shen.legitimate-term? (hd (tl V864))) (shen.legitimate-term? (hd (tl (tl V864)))))) ((and (cons? V864) (and (= mode (hd V864)) (and (cons? (tl V864)) (and (cons? (tl (tl V864))) (and (= + (hd (tl (tl V864)))) (= () (tl (tl (tl V864))))))))) (shen.legitimate-term? (hd (tl V864)))) ((and (cons? V864) (and (= mode (hd V864)) (and (cons? (tl V864)) (and (cons? (tl (tl V864))) (and (= - (hd (tl (tl V864)))) (= () (tl (tl (tl V864))))))))) (shen.legitimate-term? (hd (tl V864)))) ((cons? V864) false) (true true)))

(defun shen.eval-cons (V865) (cond ((and (cons? V865) (and (= cons (hd V865)) (and (cons? (tl V865)) (and (cons? (tl (tl V865))) (= () (tl (tl (tl V865)))))))) (cons (shen.eval-cons (hd (tl V865))) (shen.eval-cons (hd (tl (tl V865)))))) ((and (cons? V865) (and (= mode (hd V865)) (and (cons? (tl V865)) (and (cons? (tl (tl V865))) (= () (tl (tl (tl V865)))))))) (cons mode (cons (shen.eval-cons (hd (tl V865))) (tl (tl V865))))) (true V865)))

(defun shen.<body*> (V866) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V866) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V866) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V867) (let YaccParse (if (and (cons? (hd V867)) (= ! (hd (hd V867)))) (shen.pair (hd (shen.pair (tl (hd V867)) (shen.hdtl V867))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V867)) (let Parse_X (hd (hd V867)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V867)) (shen.hdtl V867))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V868) (if (cons? (hd V868)) (let Parse_X (hd (hd V868)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V868)) (shen.hdtl V868))) Parse_X) (fail))) (fail)))

(defun cut (V869 V870 V871) (let Result (thaw V871) (if (= Result false) V869 Result)))

(defun shen.insert_modes (V872) (cond ((and (cons? V872) (and (= mode (hd V872)) (and (cons? (tl V872)) (and (cons? (tl (tl V872))) (= () (tl (tl (tl V872)))))))) V872) ((= () V872) ()) ((cons? V872) (cons (cons mode (cons (hd V872) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V872)) (cons - ()))))) (true V872)))

(defun shen.s-prolog (V873) (map (lambda V826 (eval V826)) (shen.prolog->shen V873)))

(defun shen.prolog->shen (V874) (map (lambda V829 (shen.compile_prolog_procedure V829)) (shen.group_clauses (map (lambda V828 (shen.s-prolog_clause V828)) (mapcan (lambda V827 (shen.head_abstraction V827)) V874)))))

(defun shen.s-prolog_clause (V875) (cond ((and (cons? V875) (and (cons? (tl V875)) (and (= :- (hd (tl V875))) (and (cons? (tl (tl V875))) (= () (tl (tl (tl V875)))))))) (cons (hd V875) (cons :- (cons (map (lambda V830 (shen.s-prolog_literal V830)) (hd (tl (tl V875)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V876) (cond ((and (cons? V876) (and (cons? (tl V876)) (and (= :- (hd (tl V876))) (and (cons? (tl (tl V876))) (and (= () (tl (tl (tl V876)))) (< (shen.complexity_head (hd V876)) (value shen.*maxcomplexity*))))))) (cons V876 ())) ((and (cons? V876) (and (cons? (hd V876)) (and (cons? (tl V876)) (and (= :- (hd (tl V876))) (and (cons? (tl (tl V876))) (= () (tl (tl (tl V876))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V876))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V876)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V876)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V876)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V881) (cond ((cons? V881) (shen.product (map (lambda V831 (shen.complexity V831)) (tl V881)))) (true (shen.f_error shen.complexity_head))))

(defun shen.complexity (V889) (cond ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (hd (tl V889))) (and (= mode (hd (hd (tl V889)))) (and (cons? (tl (hd (tl V889)))) (and (cons? (tl (tl (hd (tl V889))))) (and (= () (tl (tl (tl (hd (tl V889)))))) (and (cons? (tl (tl V889))) (= () (tl (tl (tl V889))))))))))))) (shen.complexity (hd (tl V889)))) ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (hd (tl V889))) (and (cons? (tl (tl V889))) (and (= + (hd (tl (tl V889)))) (= () (tl (tl (tl V889)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V889))) (tl (tl V889))))) (shen.complexity (cons mode (cons (tl (hd (tl V889))) (tl (tl V889)))))))) ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (hd (tl V889))) (and (cons? (tl (tl V889))) (and (= - (hd (tl (tl V889)))) (= () (tl (tl (tl V889)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V889))) (tl (tl V889))))) (shen.complexity (cons mode (cons (tl (hd (tl V889))) (tl (tl V889))))))) ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (tl (tl V889))) (and (= () (tl (tl (tl V889)))) (variable? (hd (tl V889)))))))) 1) ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (tl (tl V889))) (and (= + (hd (tl (tl V889)))) (= () (tl (tl (tl V889))))))))) 2) ((and (cons? V889) (and (= mode (hd V889)) (and (cons? (tl V889)) (and (cons? (tl (tl V889))) (and (= - (hd (tl (tl V889)))) (= () (tl (tl (tl V889))))))))) 1) (true (shen.complexity (cons mode (cons V889 (cons + ())))))))

(defun shen.product (V890) (cond ((= () V890) 1) ((cons? V890) (* (hd V890) (shen.product (tl V890)))) (true (shen.f_error shen.product))))

(defun shen.s-prolog_literal (V891) (cond ((and (cons? V891) (and (= is (hd V891)) (and (cons? (tl V891)) (and (cons? (tl (tl V891))) (= () (tl (tl (tl V891)))))))) (cons bind (cons (hd (tl V891)) (cons (shen.insert_deref (hd (tl (tl V891)))) ())))) ((and (cons? V891) (and (= when (hd V891)) (and (cons? (tl V891)) (= () (tl (tl V891)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V891))) ()))) ((and (cons? V891) (and (= bind (hd V891)) (and (cons? (tl V891)) (and (cons? (tl (tl V891))) (= () (tl (tl (tl V891)))))))) (cons bind (cons (hd (tl V891)) (cons (shen.insert_lazyderef (hd (tl (tl V891)))) ())))) ((and (cons? V891) (and (= fwhen (hd V891)) (and (cons? (tl V891)) (= () (tl (tl V891)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V891))) ()))) ((cons? V891) V891) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V892) (cond ((variable? V892) (cons shen.deref (cons V892 (cons ProcessN ())))) ((cons? V892) (cons (shen.insert_deref (hd V892)) (shen.insert_deref (tl V892)))) (true V892)))

(defun shen.insert_lazyderef (V893) (cond ((variable? V893) (cons shen.lazyderef (cons V893 (cons ProcessN ())))) ((cons? V893) (cons (shen.insert_lazyderef (hd V893)) (shen.insert_lazyderef (tl V893)))) (true V893)))

(defun shen.m_prolog_to_s-prolog_predicate (V894) (cond ((= = V894) unify) ((= =! V894) unify!) ((= == V894) identical) (true V894)))

(defun shen.group_clauses (V895) (cond ((= () V895) ()) ((cons? V895) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V895) X)) V895) (let Rest (difference V895 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V898 V899) (cond ((= () V899) ()) ((cons? V899) (if (V898 (hd V899)) (cons (hd V899) (shen.collect V898 (tl V899))) (shen.collect V898 (tl V899)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V916 V917) (cond ((and (cons? V916) (and (cons? (hd V916)) (and (cons? V917) (cons? (hd V917))))) (= (hd (hd V916)) (hd (hd V917)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V918) (let F (shen.procedure_name V918) (let Shen (shen.clauses-to-shen F V918) Shen)))

(defun shen.procedure_name (V931) (cond ((and (cons? V931) (and (cons? (hd V931)) (cons? (hd (hd V931))))) (hd (hd (hd V931)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V932 V933) (let Linear (map (lambda V832 (shen.linearise-clause V832)) V933) (let Arity (shen.prolog-aritycheck V932 (map (lambda V833 (head V833)) V933)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda V834 (shen.aum_to_shen V834)) AUM_instructions))) (let ShenDef (cons define (cons V932 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V934) (cond ((not (shen.occurs? cut V934)) V934) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V934 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V940 V941) (cond ((= V941 V940) false) (true V941)))

(defun shen.nest-disjunct (V942) (cond ((and (cons? V942) (= () (tl V942))) (hd V942)) ((cons? V942) (shen.lisp-or (hd V942) (shen.nest-disjunct (tl V942)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V943 V944) (cons let (cons Case (cons V943 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V944 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V947 V948) (cond ((and (cons? V948) (= () (tl V948))) (- (length (hd V948)) 1)) ((and (cons? V948) (cons? (tl V948))) (if (= (length (hd V948)) (length (hd (tl V948)))) (shen.prolog-aritycheck V947 (tl V948)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V947 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V949) (cond ((and (cons? V949) (and (cons? (tl V949)) (and (= :- (hd (tl V949))) (and (cons? (tl (tl V949))) (= () (tl (tl (tl V949)))))))) (let Linear (shen.linearise (cons (hd V949) (tl (tl V949)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V950) (cond ((and (cons? V950) (and (cons? (tl V950)) (= () (tl (tl V950))))) (cons (shen.explicit_modes (hd V950)) (cons :- (cons (shen.cf_help (hd (tl V950))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V951) (cond ((cons? V951) (cons (hd V951) (map (lambda V835 (shen.em_help V835)) (tl V951)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V952) (cond ((and (cons? V952) (and (= mode (hd V952)) (and (cons? (tl V952)) (and (cons? (tl (tl V952))) (= () (tl (tl (tl V952)))))))) V952) (true (cons mode (cons V952 (cons + ()))))))

(defun shen.cf_help (V953) (cond ((and (cons? V953) (and (= where (hd V953)) (and (cons? (tl V953)) (and (cons? (hd (tl V953))) (and (= = (hd (hd (tl V953)))) (and (cons? (tl (hd (tl V953)))) (and (cons? (tl (tl (hd (tl V953))))) (and (= () (tl (tl (tl (hd (tl V953)))))) (and (cons? (tl (tl V953))) (= () (tl (tl (tl V953))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V953)))) (shen.cf_help (hd (tl (tl V953)))))) (true V953)))

(defun occurs-check (V958) (cond ((= + V958) (set shen.*occurs* true)) ((= - V958) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V959 V960) (cond ((and (cons? V959) (and (cons? (hd V959)) (and (cons? (tl V959)) (and (= :- (hd (tl V959))) (and (cons? (tl (tl V959))) (= () (tl (tl (tl V959))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V959)) (cons (shen.continuation_call (tl (hd V959)) (hd (tl (tl V959)))) ()))) V960) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V961 V962) (let VTerms (cons ProcessN (shen.extract_vars V961)) (let VBody (shen.extract_vars V962) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V962)))))

(defun remove (V963 V964) (shen.remove-h V963 V964 ()))

(defun shen.remove-h (V968 V969 V970) (cond ((= () V969) (reverse V970)) ((and (cons? V969) (= (hd V969) V968)) (shen.remove-h (hd V969) (tl V969) V970)) ((cons? V969) (shen.remove-h V968 (tl V969) (cons (hd V969) V970))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V971 V972) (cond ((and (= () V971) (= () V972)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V972) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V971 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V971) (cons call (cons shen.the (cons shen.continuation (cons V972 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V971 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V972 ())))) ())))))))))))

(defun shen.make_mu_application (V973 V974) (cond ((and (cons? V973) (and (= shen.mu (hd V973)) (and (cons? (tl V973)) (and (= () (hd (tl V973))) (and (cons? (tl (tl V973))) (and (= () (tl (tl (tl V973)))) (= () V974))))))) (hd (tl (tl V973)))) ((and (cons? V973) (and (= shen.mu (hd V973)) (and (cons? (tl V973)) (and (cons? (hd (tl V973))) (and (cons? (tl (tl V973))) (and (= () (tl (tl (tl V973)))) (cons? V974))))))) (cons (cons shen.mu (cons (hd (hd (tl V973))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V973))) (tl (tl V973)))) (tl V974)) ()))) (cons (hd V974) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V981 V982) (cond ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (hd (tl (hd V981)))) (and (= mode (hd (hd (tl (hd V981))))) (and (cons? (tl (hd (tl (hd V981))))) (and (cons? (tl (tl (hd (tl (hd V981)))))) (and (= () (tl (tl (tl (hd (tl (hd V981))))))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (= () (tl (tl V981))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V981))))) (tl (tl (hd V981))))) (tl V981)) (hd (tl (tl (hd (tl (hd V981)))))))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (= _ (hd (tl (hd V981)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V981)))) V982)) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (shen.ephemeral_variable? (hd (tl (hd V981))) (hd (tl V981))))))))))) (subst (hd (tl V981)) (hd (tl (hd V981))) (shen.mu_reduction (hd (tl (tl (hd V981)))) V982))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (variable? (hd (tl (hd V981)))))))))))) (cons let (cons (hd (tl (hd V981))) (cons shen.be (cons (hd (tl V981)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V981)))) V982) ()))))))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (and (= - V982) (shen.prolog_constant? (hd (tl (hd V981))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V981))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V981))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V981)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (and (= + V982) (shen.prolog_constant? (hd (tl (hd V981))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V981))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V981))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V981)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V981))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V981)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (hd (tl (hd V981)))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (= - V982)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V981))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V981)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V981)))) (tl (tl (hd V981))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V981) (and (cons? (hd V981)) (and (= shen.mu (hd (hd V981))) (and (cons? (tl (hd V981))) (and (cons? (hd (tl (hd V981)))) (and (cons? (tl (tl (hd V981)))) (and (= () (tl (tl (tl (hd V981))))) (and (cons? (tl V981)) (and (= () (tl (tl V981))) (= + V982)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V981))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V981)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V981)))) (tl (tl (hd V981))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V981)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V981))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V981)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V981)))

(defun shen.rcons_form (V983) (cond ((cons? V983) (cons cons (cons (shen.rcons_form (hd V983)) (cons (shen.rcons_form (tl V983)) ())))) (true V983)))

(defun shen.remove_modes (V984) (cond ((and (cons? V984) (and (= mode (hd V984)) (and (cons? (tl V984)) (and (cons? (tl (tl V984))) (and (= + (hd (tl (tl V984)))) (= () (tl (tl (tl V984))))))))) (shen.remove_modes (hd (tl V984)))) ((and (cons? V984) (and (= mode (hd V984)) (and (cons? (tl V984)) (and (cons? (tl (tl V984))) (and (= - (hd (tl (tl V984)))) (= () (tl (tl (tl V984))))))))) (shen.remove_modes (hd (tl V984)))) ((cons? V984) (cons (shen.remove_modes (hd V984)) (shen.remove_modes (tl V984)))) (true V984)))

(defun shen.ephemeral_variable? (V985 V986) (and (variable? V985) (variable? V986)))

(defun shen.prolog_constant? (V995) (cond ((cons? V995) false) (true true)))

(defun shen.aum_to_shen (V996) (cond ((and (cons? V996) (and (= let (hd V996)) (and (cons? (tl V996)) (and (cons? (tl (tl V996))) (and (= shen.be (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (cons? (tl (tl (tl (tl V996))))) (and (= in (hd (tl (tl (tl (tl V996)))))) (and (cons? (tl (tl (tl (tl (tl V996)))))) (= () (tl (tl (tl (tl (tl (tl V996)))))))))))))))) (cons let (cons (hd (tl V996)) (cons (shen.aum_to_shen (hd (tl (tl (tl V996))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V996))))))) ()))))) ((and (cons? V996) (and (= shen.the (hd V996)) (and (cons? (tl V996)) (and (= shen.result (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.of (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= shen.dereferencing (hd (tl (tl (tl V996))))) (and (cons? (tl (tl (tl (tl V996))))) (= () (tl (tl (tl (tl (tl V996))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V996)))))) (cons ProcessN ())))) ((and (cons? V996) (and (= if (hd V996)) (and (cons? (tl V996)) (and (cons? (tl (tl V996))) (and (= shen.then (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (cons? (tl (tl (tl (tl V996))))) (and (= shen.else (hd (tl (tl (tl (tl V996)))))) (and (cons? (tl (tl (tl (tl (tl V996)))))) (= () (tl (tl (tl (tl (tl (tl V996)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V996))) (cons (shen.aum_to_shen (hd (tl (tl (tl V996))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V996))))))) ()))))) ((and (cons? V996) (and (cons? (tl V996)) (and (= is (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.a (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= shen.variable (hd (tl (tl (tl V996))))) (= () (tl (tl (tl (tl V996)))))))))))) (cons shen.pvar? (cons (hd V996) ()))) ((and (cons? V996) (and (cons? (tl V996)) (and (= is (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.a (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= shen.non-empty (hd (tl (tl (tl V996))))) (and (cons? (tl (tl (tl (tl V996))))) (and (= list (hd (tl (tl (tl (tl V996)))))) (= () (tl (tl (tl (tl (tl V996))))))))))))))) (cons cons? (cons (hd V996) ()))) ((and (cons? V996) (and (= shen.rename (hd V996)) (and (cons? (tl V996)) (and (= shen.the (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.variables (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= in (hd (tl (tl (tl V996))))) (and (cons? (tl (tl (tl (tl V996))))) (and (= () (hd (tl (tl (tl (tl V996)))))) (and (cons? (tl (tl (tl (tl (tl V996)))))) (and (= and (hd (tl (tl (tl (tl (tl V996))))))) (and (cons? (tl (tl (tl (tl (tl (tl V996))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V996)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V996)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V996)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V996)))))))))) ((and (cons? V996) (and (= shen.rename (hd V996)) (and (cons? (tl V996)) (and (= shen.the (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.variables (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= in (hd (tl (tl (tl V996))))) (and (cons? (tl (tl (tl (tl V996))))) (and (cons? (hd (tl (tl (tl (tl V996)))))) (and (cons? (tl (tl (tl (tl (tl V996)))))) (and (= and (hd (tl (tl (tl (tl (tl V996))))))) (and (cons? (tl (tl (tl (tl (tl (tl V996))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V996)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V996)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V996)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V996)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V996)))))) (tl (tl (tl (tl (tl V996))))))))))) ()))))) ((and (cons? V996) (and (= bind (hd V996)) (and (cons? (tl V996)) (and (cons? (tl (tl V996))) (and (= shen.to (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (cons? (tl (tl (tl (tl V996))))) (and (= in (hd (tl (tl (tl (tl V996)))))) (and (cons? (tl (tl (tl (tl (tl V996)))))) (= () (tl (tl (tl (tl (tl (tl V996)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V996)) (cons (shen.chwild (hd (tl (tl (tl V996))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V996))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V996)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V996) (and (cons? (tl V996)) (and (= is (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= identical (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (and (= shen.to (hd (tl (tl (tl V996))))) (and (cons? (tl (tl (tl (tl V996))))) (= () (tl (tl (tl (tl (tl V996)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V996))))) (cons (hd V996) ())))) ((= shen.failed! V996) false) ((and (cons? V996) (and (= shen.the (hd V996)) (and (cons? (tl V996)) (and (= head (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.of (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (= () (tl (tl (tl (tl V996)))))))))))) (cons hd (tl (tl (tl V996))))) ((and (cons? V996) (and (= shen.the (hd V996)) (and (cons? (tl V996)) (and (= tail (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.of (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (= () (tl (tl (tl (tl V996)))))))))))) (cons tl (tl (tl (tl V996))))) ((and (cons? V996) (and (= shen.pop (hd V996)) (and (cons? (tl V996)) (and (= shen.the (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.stack (hd (tl (tl V996)))) (= () (tl (tl (tl V996)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V996) (and (= call (hd V996)) (and (cons? (tl V996)) (and (= shen.the (hd (tl V996))) (and (cons? (tl (tl V996))) (and (= shen.continuation (hd (tl (tl V996)))) (and (cons? (tl (tl (tl V996)))) (= () (tl (tl (tl (tl V996)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V996))))) ProcessN Continuation) ())))) (true V996)))

(defun shen.chwild (V997) (cond ((= V997 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V997) (map (lambda V836 (shen.chwild V836)) V997)) (true V997)))

(defun shen.newpv (V998) (let Count+1 (+ (<-address (value shen.*varcounter*) V998) 1) (let IncVar (address-> (value shen.*varcounter*) V998 Count+1) (let Vector (<-address (value shen.*prologvectors*) V998) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V998 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V999 V1000) (let Vector (<-address (value shen.*prologvectors*) V999) (let BigVector (shen.resize-vector Vector (+ V1000 V1000) shen.-null-) (address-> (value shen.*prologvectors*) V999 BigVector))))

(defun shen.resize-vector (V1001 V1002 V1003) (let BigVector (address-> (absvector (+ 1 V1002)) 0 V1002) (shen.copy-vector V1001 BigVector (limit V1001) V1002 V1003)))

(defun shen.copy-vector (V1004 V1005 V1006 V1007 V1008) (shen.copy-vector-stage-2 (+ 1 V1006) (+ V1007 1) V1008 (shen.copy-vector-stage-1 1 V1004 V1005 (+ 1 V1006))))

(defun shen.copy-vector-stage-1 (V1012 V1013 V1014 V1015) (cond ((= V1015 V1012) V1014) (true (shen.copy-vector-stage-1 (+ 1 V1012) V1013 (address-> V1014 V1012 (<-address V1013 V1012)) V1015))))

(defun shen.copy-vector-stage-2 (V1019 V1020 V1021 V1022) (cond ((= V1020 V1019) V1022) (true (shen.copy-vector-stage-2 (+ V1019 1) V1020 V1021 (address-> V1022 V1019 V1021)))))

(defun shen.mk-pvar (V1023) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V1023))

(defun shen.pvar? (V1024) (trap-error (and (absvector? V1024) (= (<-address V1024 0) shen.pvar)) (lambda E false)))

(defun shen.bindv (V1025 V1026 V1027) (let Vector (<-address (value shen.*prologvectors*) V1027) (address-> Vector (<-address V1025 1) V1026)))

(defun shen.unbindv (V1028 V1029) (let Vector (<-address (value shen.*prologvectors*) V1029) (address-> Vector (<-address V1028 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V1030 V1031 V1032) (cond ((and (cons? V1030) (and (cons? (hd V1030)) (= () (tl V1030)))) (cons (hd (hd V1030)) (append (tl (hd V1030)) (cons V1031 (cons V1032 ()))))) ((and (cons? V1030) (cons? (hd V1030))) (let NewContinuation (shen.newcontinuation (tl V1030) V1031 V1032) (cons (hd (hd V1030)) (append (tl (hd V1030)) (cons V1031 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V1033 V1034 V1035) (cond ((= () V1033) V1035) ((and (cons? V1033) (cons? (hd V1033))) (cons freeze (cons (cons (hd (hd V1033)) (append (tl (hd V1033)) (cons V1034 (cons (shen.newcontinuation (tl V1033) V1034 V1035) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V1040 V1041 V1042) (shen.deref V1040 V1041))

(defun shen.measure&return (V1047 V1048 V1049) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V1047 V1048)))

(defun unify (V1050 V1051 V1052 V1053) (shen.lzy= (shen.lazyderef V1050 V1052) (shen.lazyderef V1051 V1052) V1052 V1053))

(defun shen.lzy= (V1071 V1072 V1073 V1074) (cond ((= V1072 V1071) (thaw V1074)) ((shen.pvar? V1071) (bind V1071 V1072 V1073 V1074)) ((shen.pvar? V1072) (bind V1072 V1071 V1073 V1074)) ((and (cons? V1071) (cons? V1072)) (shen.lzy= (shen.lazyderef (hd V1071) V1073) (shen.lazyderef (hd V1072) V1073) V1073 (freeze (shen.lzy= (shen.lazyderef (tl V1071) V1073) (shen.lazyderef (tl V1072) V1073) V1073 V1074)))) (true false)))

(defun shen.deref (V1075 V1076) (cond ((cons? V1075) (cons (shen.deref (hd V1075) V1076) (shen.deref (tl V1075) V1076))) (true (if (shen.pvar? V1075) (let Value (shen.valvector V1075 V1076) (if (= Value shen.-null-) V1075 (shen.deref Value V1076))) V1075))))

(defun shen.lazyderef (V1077 V1078) (if (shen.pvar? V1077) (let Value (shen.valvector V1077 V1078) (if (= Value shen.-null-) V1077 (shen.lazyderef Value V1078))) V1077))

(defun shen.valvector (V1079 V1080) (<-address (<-address (value shen.*prologvectors*) V1080) (<-address V1079 1)))

(defun unify! (V1081 V1082 V1083 V1084) (shen.lzy=! (shen.lazyderef V1081 V1083) (shen.lazyderef V1082 V1083) V1083 V1084))

(defun shen.lzy=! (V1102 V1103 V1104 V1105) (cond ((= V1103 V1102) (thaw V1105)) ((and (shen.pvar? V1102) (not (shen.occurs? V1102 (shen.deref V1103 V1104)))) (bind V1102 V1103 V1104 V1105)) ((and (shen.pvar? V1103) (not (shen.occurs? V1103 (shen.deref V1102 V1104)))) (bind V1103 V1102 V1104 V1105)) ((and (cons? V1102) (cons? V1103)) (shen.lzy=! (shen.lazyderef (hd V1102) V1104) (shen.lazyderef (hd V1103) V1104) V1104 (freeze (shen.lzy=! (shen.lazyderef (tl V1102) V1104) (shen.lazyderef (tl V1103) V1104) V1104 V1105)))) (true false)))

(defun shen.occurs? (V1115 V1116) (cond ((= V1116 V1115) true) ((cons? V1116) (or (shen.occurs? V1115 (hd V1116)) (shen.occurs? V1115 (tl V1116)))) (true false)))

(defun identical (V1117 V1118 V1119 V1120) (shen.lzy== (shen.lazyderef V1117 V1119) (shen.lazyderef V1118 V1119) V1119 V1120))

(defun shen.lzy== (V1138 V1139 V1140 V1141) (cond ((= V1139 V1138) (thaw V1141)) ((and (cons? V1138) (cons? V1139)) (shen.lzy== (shen.lazyderef (hd V1138) V1140) (shen.lazyderef (hd V1139) V1140) V1140 (freeze (shen.lzy== (tl V1138) (tl V1139) V1140 V1141)))) (true false)))

(defun shen.pvar (V1142) (cn "Var" (shen.app (<-address V1142 1) "" shen.a)))

(defun bind (V1143 V1144 V1145 V1146) (do (shen.bindv V1143 V1144 V1145) (let Result (thaw V1146) (do (shen.unbindv V1143 V1145) Result))))

(defun fwhen (V1161 V1162 V1163) (cond ((= true V1161) (thaw V1163)) ((= false V1161) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V1161 "%" shen.s))))))

(defun call (V1176 V1177 V1178) (cond ((cons? V1176) (shen.call-help (shen.m_prolog_to_s-prolog_predicate (shen.lazyderef (hd V1176) V1177)) (tl V1176) V1177 V1178)) (true false)))

(defun shen.call-help (V1179 V1180 V1181 V1182) (cond ((= () V1180) (V1179 V1181 V1182)) ((cons? V1180) (shen.call-help (V1179 (hd V1180)) (tl V1180) V1181 V1182)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V1183) (cond ((and (cons? V1183) (cons? (hd V1183))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V1183)) (shen.insert-prolog-variables (cons (tl (hd V1183)) (cons (tl V1183) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V1184 V1185 V1186) (cond ((and (cons? V1185) (and (cons? (tl V1185)) (= () (tl (tl V1185))))) (shen.intprolog-help-help V1184 (hd V1185) (hd (tl V1185)) V1186)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V1187 V1188 V1189 V1190) (cond ((= () V1188) (V1187 V1190 (freeze (shen.call-rest V1189 V1190)))) ((cons? V1188) (shen.intprolog-help-help (V1187 (hd V1188)) (tl V1188) V1189 V1190)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V1193 V1194) (cond ((= () V1193) true) ((and (cons? V1193) (and (cons? (hd V1193)) (cons? (tl (hd V1193))))) (shen.call-rest (cons (cons ((hd (hd V1193)) (hd (tl (hd V1193)))) (tl (tl (hd V1193)))) (tl V1193)) V1194)) ((and (cons? V1193) (and (cons? (hd V1193)) (= () (tl (hd V1193))))) ((hd (hd V1193)) V1194 (freeze (shen.call-rest (tl V1193) V1194)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V1195 V1196) (shen.insert-prolog-variables-help V1195 (shen.flatten V1195) V1196))

(defun shen.insert-prolog-variables-help (V1201 V1202 V1203) (cond ((= () V1202) V1201) ((and (cons? V1202) (variable? (hd V1202))) (let V (shen.newpv V1203) (let XV/Y (subst V (hd V1202) V1201) (let Z-Y (remove (hd V1202) (tl V1202)) (shen.insert-prolog-variables-help XV/Y Z-Y V1203))))) ((cons? V1202) (shen.insert-prolog-variables-help V1201 (tl V1202) V1203)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V1204) (let Vector (address-> (value shen.*prologvectors*) V1204 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V1204 1) V1204)))



