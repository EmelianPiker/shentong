"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2470) (cond ((and (cons? V2470) (and (= defcc (hd V2470)) (cons? (tl V2470)))) (shen.yacc->shen (hd (tl V2470)) (tl (tl V2470)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2471 V2472) (let CCRules (shen.split_cc_rules true V2472 ()) (let CCBody (map (lambda V2468 (shen.cc_body V2468)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2471 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2473) (cond ((> (occurrences kill V2473) 0) (cons trap-error (cons V2473 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2473)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2474) (let String (error-to-string V2474) (if (= String "yacc kill") (fail) V2474)))

(defun shen.split_cc_rules (V2477 V2478 V2479) (cond ((and (= () V2478) (= () V2479)) ()) ((= () V2478) (cons (shen.split_cc_rule V2477 (reverse V2479) ()) ())) ((and (cons? V2478) (= ; (hd V2478))) (cons (shen.split_cc_rule V2477 (reverse V2479) ()) (shen.split_cc_rules V2477 (tl V2478) ()))) ((cons? V2478) (shen.split_cc_rules V2477 (tl V2478) (cons (hd V2478) V2479))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2484 V2485 V2486) (cond ((and (cons? V2485) (and (= := (hd V2485)) (and (cons? (tl V2485)) (= () (tl (tl V2485)))))) (cons (reverse V2486) (tl V2485))) ((and (cons? V2485) (and (= := (hd V2485)) (and (cons? (tl V2485)) (and (cons? (tl (tl V2485))) (and (= where (hd (tl (tl V2485)))) (and (cons? (tl (tl (tl V2485)))) (= () (tl (tl (tl (tl V2485))))))))))) (cons (reverse V2486) (cons (cons where (cons (hd (tl (tl (tl V2485)))) (cons (hd (tl V2485)) ()))) ()))) ((= () V2485) (do (shen.semantic-completion-warning V2484 V2486) (shen.split_cc_rule V2484 (cons := (cons (shen.default_semantics (reverse V2486)) ())) V2486))) ((cons? V2485) (shen.split_cc_rule V2484 (tl V2485) (cons (hd V2485) V2486))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2495 V2496) (cond ((= true V2495) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2496)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2497) (cond ((= () V2497) ()) ((and (cons? V2497) (and (= () (tl V2497)) (shen.grammar_symbol? (hd V2497)))) (hd V2497)) ((and (cons? V2497) (shen.grammar_symbol? (hd V2497))) (cons append (cons (hd V2497) (cons (shen.default_semantics (tl V2497)) ())))) ((cons? V2497) (cons cons (cons (hd V2497) (cons (shen.default_semantics (tl V2497)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V2498) (and (symbol? V2498) (let Cs (shen.strip-pathname (explode V2498)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2499) (cond ((and (cons? V2499) (= () (tl V2499))) (hd V2499)) ((cons? V2499) (let P YaccParse (cons let (cons P (cons (hd V2499) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2499)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V2500) (cond ((and (cons? V2500) (and (cons? (tl V2500)) (= () (tl (tl V2500))))) (shen.syntax (hd V2500) Stream (hd (tl V2500)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V2501 V2502 V2503) (cond ((and (= () V2501) (and (cons? V2503) (and (= where (hd V2503)) (and (cons? (tl V2503)) (and (cons? (tl (tl V2503))) (= () (tl (tl (tl V2503))))))))) (cons if (cons (shen.semantics (hd (tl V2503))) (cons (cons shen.pair (cons (cons hd (cons V2502 ())) (cons (shen.semantics (hd (tl (tl V2503)))) ()))) (cons (cons fail ()) ()))))) ((= () V2501) (cons shen.pair (cons (cons hd (cons V2502 ())) (cons (shen.semantics V2503) ())))) ((cons? V2501) (if (shen.grammar_symbol? (hd V2501)) (shen.recursive_descent V2501 V2502 V2503) (if (variable? (hd V2501)) (shen.variable-match V2501 V2502 V2503) (if (shen.jump_stream? (hd V2501)) (shen.jump_stream V2501 V2502 V2503) (if (shen.terminal? (hd V2501)) (shen.check_stream V2501 V2502 V2503) (if (cons? (hd V2501)) (shen.list-stream (shen.decons (hd V2501)) (tl V2501) V2502 V2503) (simple-error (shen.app (hd V2501) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V2504 V2505 V2506 V2507) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2506 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2506 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2505 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2506 ())) ())) (cons (cons hd (cons (cons tl (cons V2506 ())) ())) ()))) V2507) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2504 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2506 ())) ())) (cons (cons hd (cons (cons tl (cons V2506 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2508) (cond ((and (cons? V2508) (and (= cons (hd V2508)) (and (cons? (tl V2508)) (and (cons? (tl (tl V2508))) (and (= () (hd (tl (tl V2508)))) (= () (tl (tl (tl V2508))))))))) (cons (hd (tl V2508)) ())) ((and (cons? V2508) (and (= cons (hd V2508)) (and (cons? (tl V2508)) (and (cons? (tl (tl V2508))) (= () (tl (tl (tl V2508)))))))) (cons (hd (tl V2508)) (shen.decons (hd (tl (tl V2508)))))) (true V2508)))

(defun shen.insert-runon (V2520 V2521 V2522) (cond ((and (cons? V2522) (and (= shen.pair (hd V2522)) (and (cons? (tl V2522)) (and (cons? (tl (tl V2522))) (and (= () (tl (tl (tl V2522)))) (= (hd (tl (tl V2522))) V2521)))))) V2520) ((cons? V2522) (map (lambda Z (shen.insert-runon V2520 V2521 Z)) V2522)) (true V2522)))

(defun shen.strip-pathname (V2527) (cond ((not (element? "." V2527)) V2527) ((cons? V2527) (shen.strip-pathname (tl V2527))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V2528 V2529 V2530) (cond ((cons? V2528) (let Test (cons (hd V2528) (cons V2529 ())) (let Action (shen.syntax (tl V2528) (concat Parse_ (hd V2528)) V2530) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2528)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2528)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V2531 V2532 V2533) (cond ((cons? V2531) (let Test (cons cons? (cons (cons hd (cons V2532 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2531)) (cons (cons hd (cons (cons hd (cons V2532 ())) ())) (cons (shen.syntax (tl V2531) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2532 ())) ())) (cons (cons shen.hdtl (cons V2532 ())) ()))) V2533) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V2542) (cond ((cons? V2542) false) ((variable? V2542) false) (true true)))

(defun shen.jump_stream? (V2547) (cond ((= V2547 _) true) (true false)))

(defun shen.check_stream (V2548 V2549 V2550) (cond ((cons? V2548) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2549 ())) ())) (cons (cons = (cons (hd V2548) (cons (cons hd (cons (cons hd (cons V2549 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2548) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2549 ())) ())) (cons (cons shen.hdtl (cons V2549 ())) ()))) V2550) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V2551 V2552 V2553) (cond ((cons? V2551) (let Test (cons cons? (cons (cons hd (cons V2552 ())) ())) (let Action (shen.syntax (tl V2551) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2552 ())) ())) (cons (cons shen.hdtl (cons V2552 ())) ()))) V2553) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V2554) (cond ((= () V2554) ()) ((shen.grammar_symbol? V2554) (cons shen.hdtl (cons (concat Parse_ V2554) ()))) ((variable? V2554) (concat Parse_ V2554)) ((cons? V2554) (map (lambda V2469 (shen.semantics V2469)) V2554)) (true V2554)))

(defun shen.snd-or-fail (V2561) (cond ((and (cons? V2561) (and (cons? (tl V2561)) (= () (tl (tl V2561))))) (hd (tl V2561))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V2562 V2563) (cons V2562 (cons V2563 ())))

(defun shen.hdtl (V2564) (hd (tl V2564)))

(defun shen.<!> (V2571) (cond ((and (cons? V2571) (and (cons? (tl V2571)) (= () (tl (tl V2571))))) (cons () (cons (hd V2571) ()))) (true (fail))))

(defun <e> (V2576) (cond ((and (cons? V2576) (and (cons? (tl V2576)) (= () (tl (tl V2576))))) (cons (hd V2576) (cons () ()))) (true (shen.f_error <e>))))



