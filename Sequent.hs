{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE OverloadedStrings #-}

{-
Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-}

module Sequent where

import Control.Monad.Except
import Control.Parallel
import Environment
import Primitives
import SourceUtils
import Types
import Utils
import Wrap
import Toplevel
import Core
import Sys

kl_shen_datatype_error :: Types.KLValue ->
                          Types.KLContext Types.Env Types.KLValue
kl_shen_datatype_error (!kl_V1370) = do !kl_if_0 <- kl_V1370 `pseq` consP kl_V1370
                                        !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1370 `pseq` tl kl_V1370
                                                                     !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                                     klIf kl_if_3 (do let !appl_4 = List []
                                                                                      !appl_5 <- kl_V1370 `pseq` tl kl_V1370
                                                                                      !appl_6 <- appl_5 `pseq` tl appl_5
                                                                                      appl_4 `pseq` (appl_6 `pseq` eq appl_4 appl_6)) (do return (Atom (B False)))) (do return (Atom (B False)))
                                        klIf kl_if_1 (do !appl_7 <- kl_V1370 `pseq` hd kl_V1370
                                                         let !aw_8 = Types.Atom (Types.UnboundSym "shen.next-50")
                                                         !appl_9 <- appl_7 `pseq` applyWrapper aw_8 [Types.Atom (Types.N (Types.KI 50)),
                                                                                                     appl_7]
                                                         let !aw_10 = Types.Atom (Types.UnboundSym "shen.app")
                                                         !appl_11 <- appl_9 `pseq` applyWrapper aw_10 [appl_9,
                                                                                                       Types.Atom (Types.Str "\n"),
                                                                                                       Types.Atom (Types.UnboundSym "shen.a")]
                                                         !appl_12 <- appl_11 `pseq` cn (Types.Atom (Types.Str "datatype syntax error here:\n\n ")) appl_11
                                                         appl_12 `pseq` simpleError appl_12) (do klIf (Atom (B True)) (do let !aw_13 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                          applyWrapper aw_13 [ApplC (wrapNamed "shen.datatype-error" kl_shen_datatype_error)]) (do return (List [])))

kl_shen_LBdatatype_rulesRB :: Types.KLValue ->
                              Types.KLContext Types.Env Types.KLValue
kl_shen_LBdatatype_rulesRB (!kl_V1371) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                !appl_2 <- applyWrapper aw_1 []
                                                                                                                !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                                klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_LBeRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                       !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                       !appl_7 <- appl_6 `pseq` (kl_Parse_LBeRB `pseq` eq appl_6 kl_Parse_LBeRB)
                                                                                                                                                                                                       !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                       klIf kl_if_8 (do !appl_9 <- kl_Parse_LBeRB `pseq` hd kl_Parse_LBeRB
                                                                                                                                                                                                                        let !appl_10 = List []
                                                                                                                                                                                                                        let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                        appl_9 `pseq` (appl_10 `pseq` applyWrapper aw_11 [appl_9,
                                                                                                                                                                                                                                                                          appl_10])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                         applyWrapper aw_12 []))))
                                                                                                                                 let !aw_13 = Types.Atom (Types.UnboundSym "<e>")
                                                                                                                                 !appl_14 <- kl_V1371 `pseq` applyWrapper aw_13 [kl_V1371]
                                                                                                                                 appl_14 `pseq` applyWrapper appl_4 [appl_14]) (do return kl_YaccParse))))
                                            let !appl_15 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBdatatype_ruleRB) -> do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                    !appl_17 <- applyWrapper aw_16 []
                                                                                                                                    !appl_18 <- appl_17 `pseq` (kl_Parse_shen_LBdatatype_ruleRB `pseq` eq appl_17 kl_Parse_shen_LBdatatype_ruleRB)
                                                                                                                                    !kl_if_19 <- appl_18 `pseq` kl_not appl_18
                                                                                                                                    klIf kl_if_19 (do let !appl_20 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBdatatype_rulesRB) -> do let !aw_21 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                               !appl_22 <- applyWrapper aw_21 []
                                                                                                                                                                                                                                               !appl_23 <- appl_22 `pseq` (kl_Parse_shen_LBdatatype_rulesRB `pseq` eq appl_22 kl_Parse_shen_LBdatatype_rulesRB)
                                                                                                                                                                                                                                               !kl_if_24 <- appl_23 `pseq` kl_not appl_23
                                                                                                                                                                                                                                               klIf kl_if_24 (do !appl_25 <- kl_Parse_shen_LBdatatype_rulesRB `pseq` hd kl_Parse_shen_LBdatatype_rulesRB
                                                                                                                                                                                                                                                                 let !aw_26 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                 !appl_27 <- kl_Parse_shen_LBdatatype_ruleRB `pseq` applyWrapper aw_26 [kl_Parse_shen_LBdatatype_ruleRB]
                                                                                                                                                                                                                                                                 let !aw_28 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                 !appl_29 <- kl_Parse_shen_LBdatatype_rulesRB `pseq` applyWrapper aw_28 [kl_Parse_shen_LBdatatype_rulesRB]
                                                                                                                                                                                                                                                                 !appl_30 <- appl_27 `pseq` (appl_29 `pseq` klCons appl_27 appl_29)
                                                                                                                                                                                                                                                                 let !aw_31 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                 appl_25 `pseq` (appl_30 `pseq` applyWrapper aw_31 [appl_25,
                                                                                                                                                                                                                                                                                                                    appl_30])) (do let !aw_32 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                   applyWrapper aw_32 []))))
                                                                                                                                                      !appl_33 <- kl_Parse_shen_LBdatatype_ruleRB `pseq` kl_shen_LBdatatype_rulesRB kl_Parse_shen_LBdatatype_ruleRB
                                                                                                                                                      appl_33 `pseq` applyWrapper appl_20 [appl_33]) (do let !aw_34 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                         applyWrapper aw_34 []))))
                                            !appl_35 <- kl_V1371 `pseq` kl_shen_LBdatatype_ruleRB kl_V1371
                                            !appl_36 <- appl_35 `pseq` applyWrapper appl_15 [appl_35]
                                            appl_36 `pseq` applyWrapper appl_0 [appl_36]

kl_shen_LBdatatype_ruleRB :: Types.KLValue ->
                             Types.KLContext Types.Env Types.KLValue
kl_shen_LBdatatype_ruleRB (!kl_V1372) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                               !appl_2 <- applyWrapper aw_1 []
                                                                                                               !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                               klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBside_conditionsRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                         !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                                         !appl_7 <- appl_6 `pseq` (kl_Parse_shen_LBside_conditionsRB `pseq` eq appl_6 kl_Parse_shen_LBside_conditionsRB)
                                                                                                                                                                                                                         !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                                         klIf kl_if_8 (do let !appl_9 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBpremisesRB) -> do let !aw_10 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                            !appl_11 <- applyWrapper aw_10 []
                                                                                                                                                                                                                                                                                                                            !appl_12 <- appl_11 `pseq` (kl_Parse_shen_LBpremisesRB `pseq` eq appl_11 kl_Parse_shen_LBpremisesRB)
                                                                                                                                                                                                                                                                                                                            !kl_if_13 <- appl_12 `pseq` kl_not appl_12
                                                                                                                                                                                                                                                                                                                            klIf kl_if_13 (do let !appl_14 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBdoubleunderlineRB) -> do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                                        !appl_16 <- applyWrapper aw_15 []
                                                                                                                                                                                                                                                                                                                                                                                                                                        !appl_17 <- appl_16 `pseq` (kl_Parse_shen_LBdoubleunderlineRB `pseq` eq appl_16 kl_Parse_shen_LBdoubleunderlineRB)
                                                                                                                                                                                                                                                                                                                                                                                                                                        !kl_if_18 <- appl_17 `pseq` kl_not appl_17
                                                                                                                                                                                                                                                                                                                                                                                                                                        klIf kl_if_18 (do let !appl_19 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBconclusionRB) -> do let !aw_20 = Types.Atom (Types.UnboundSym "fail")
appl_21 <- applyWrapper aw_20 []
appl_22 <- appl_21 `pseq` (kl_Parse_shen_LBconclusionRB `pseq` eq appl_21 kl_Parse_shen_LBconclusionRB)
kl_if_23 <- appl_22 `pseq` kl_not appl_22
klIf kl_if_23 (do !appl_24 <- kl_Parse_shen_LBconclusionRB `pseq` hd kl_Parse_shen_LBconclusionRB
let !aw_25 = Types.Atom (Types.UnboundSym "shen.hdtl")
appl_26 <- kl_Parse_shen_LBside_conditionsRB `pseq` applyWrapper aw_25 [kl_Parse_shen_LBside_conditionsRB]
let !aw_27 = Types.Atom (Types.UnboundSym "shen.hdtl")
appl_28 <- kl_Parse_shen_LBpremisesRB `pseq` applyWrapper aw_27 [kl_Parse_shen_LBpremisesRB]
let !aw_29 = Types.Atom (Types.UnboundSym "shen.hdtl")
appl_30 <- kl_Parse_shen_LBconclusionRB `pseq` applyWrapper aw_29 [kl_Parse_shen_LBconclusionRB]
let !appl_31 = List []
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 !appl_32 <- appl_30 `pseq` (appl_31 `pseq` klCons appl_30 appl_31)
appl_33 <- appl_28 `pseq` (appl_32 `pseq` klCons appl_28 appl_32)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 !appl_34 <- appl_26 `pseq` (appl_33 `pseq` klCons appl_26 appl_33)
appl_35 <- appl_34 `pseq` kl_shen_sequent (Types.Atom (Types.UnboundSym "shen.double")) appl_34
let !aw_36 = Types.Atom (Types.UnboundSym "shen.pair")
appl_24 `pseq` (appl_35 `pseq` applyWrapper aw_36 [appl_24,
appl_35])) (do let !aw_37 = Types.Atom (Types.UnboundSym "fail")
applyWrapper aw_37 []))))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          !appl_38 <- kl_Parse_shen_LBdoubleunderlineRB `pseq` kl_shen_LBconclusionRB kl_Parse_shen_LBdoubleunderlineRB
                                                                                                                                                                                                                                                                                                                                                                                                                                                          appl_38 `pseq` applyWrapper appl_19 [appl_38]) (do let !aw_39 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             applyWrapper aw_39 []))))
                                                                                                                                                                                                                                                                                                                                              !appl_40 <- kl_Parse_shen_LBpremisesRB `pseq` kl_shen_LBdoubleunderlineRB kl_Parse_shen_LBpremisesRB
                                                                                                                                                                                                                                                                                                                                              appl_40 `pseq` applyWrapper appl_14 [appl_40]) (do let !aw_41 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                 applyWrapper aw_41 []))))
                                                                                                                                                                                                                                          !appl_42 <- kl_Parse_shen_LBside_conditionsRB `pseq` kl_shen_LBpremisesRB kl_Parse_shen_LBside_conditionsRB
                                                                                                                                                                                                                                          appl_42 `pseq` applyWrapper appl_9 [appl_42]) (do let !aw_43 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                            applyWrapper aw_43 []))))
                                                                                                                                !appl_44 <- kl_V1372 `pseq` kl_shen_LBside_conditionsRB kl_V1372
                                                                                                                                appl_44 `pseq` applyWrapper appl_4 [appl_44]) (do return kl_YaccParse))))
                                           let !appl_45 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBside_conditionsRB) -> do let !aw_46 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                     !appl_47 <- applyWrapper aw_46 []
                                                                                                                                     !appl_48 <- appl_47 `pseq` (kl_Parse_shen_LBside_conditionsRB `pseq` eq appl_47 kl_Parse_shen_LBside_conditionsRB)
                                                                                                                                     !kl_if_49 <- appl_48 `pseq` kl_not appl_48
                                                                                                                                     klIf kl_if_49 (do let !appl_50 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBpremisesRB) -> do let !aw_51 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                          !appl_52 <- applyWrapper aw_51 []
                                                                                                                                                                                                                                          !appl_53 <- appl_52 `pseq` (kl_Parse_shen_LBpremisesRB `pseq` eq appl_52 kl_Parse_shen_LBpremisesRB)
                                                                                                                                                                                                                                          !kl_if_54 <- appl_53 `pseq` kl_not appl_53
                                                                                                                                                                                                                                          klIf kl_if_54 (do let !appl_55 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBsingleunderlineRB) -> do let !aw_56 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                      !appl_57 <- applyWrapper aw_56 []
                                                                                                                                                                                                                                                                                                                                                      !appl_58 <- appl_57 `pseq` (kl_Parse_shen_LBsingleunderlineRB `pseq` eq appl_57 kl_Parse_shen_LBsingleunderlineRB)
                                                                                                                                                                                                                                                                                                                                                      !kl_if_59 <- appl_58 `pseq` kl_not appl_58
                                                                                                                                                                                                                                                                                                                                                      klIf kl_if_59 (do let !appl_60 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBconclusionRB) -> do let !aw_61 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                                                             !appl_62 <- applyWrapper aw_61 []
                                                                                                                                                                                                                                                                                                                                                                                                                                                             !appl_63 <- appl_62 `pseq` (kl_Parse_shen_LBconclusionRB `pseq` eq appl_62 kl_Parse_shen_LBconclusionRB)
                                                                                                                                                                                                                                                                                                                                                                                                                                                             !kl_if_64 <- appl_63 `pseq` kl_not appl_63
                                                                                                                                                                                                                                                                                                                                                                                                                                                             klIf kl_if_64 (do !appl_65 <- kl_Parse_shen_LBconclusionRB `pseq` hd kl_Parse_shen_LBconclusionRB
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               let !aw_66 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_67 <- kl_Parse_shen_LBside_conditionsRB `pseq` applyWrapper aw_66 [kl_Parse_shen_LBside_conditionsRB]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               let !aw_68 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_69 <- kl_Parse_shen_LBpremisesRB `pseq` applyWrapper aw_68 [kl_Parse_shen_LBpremisesRB]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               let !aw_70 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_71 <- kl_Parse_shen_LBconclusionRB `pseq` applyWrapper aw_70 [kl_Parse_shen_LBconclusionRB]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               let !appl_72 = List []
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_73 <- appl_71 `pseq` (appl_72 `pseq` klCons appl_71 appl_72)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_74 <- appl_69 `pseq` (appl_73 `pseq` klCons appl_69 appl_73)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_75 <- appl_67 `pseq` (appl_74 `pseq` klCons appl_67 appl_74)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               !appl_76 <- appl_75 `pseq` kl_shen_sequent (Types.Atom (Types.UnboundSym "shen.single")) appl_75
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               let !aw_77 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               appl_65 `pseq` (appl_76 `pseq` applyWrapper aw_77 [appl_65,
appl_76])) (do let !aw_78 = Types.Atom (Types.UnboundSym "fail")
applyWrapper aw_78 []))))
                                                                                                                                                                                                                                                                                                                                                                        !appl_79 <- kl_Parse_shen_LBsingleunderlineRB `pseq` kl_shen_LBconclusionRB kl_Parse_shen_LBsingleunderlineRB
                                                                                                                                                                                                                                                                                                                                                                        appl_79 `pseq` applyWrapper appl_60 [appl_79]) (do let !aw_80 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                           applyWrapper aw_80 []))))
                                                                                                                                                                                                                                                            !appl_81 <- kl_Parse_shen_LBpremisesRB `pseq` kl_shen_LBsingleunderlineRB kl_Parse_shen_LBpremisesRB
                                                                                                                                                                                                                                                            appl_81 `pseq` applyWrapper appl_55 [appl_81]) (do let !aw_82 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                               applyWrapper aw_82 []))))
                                                                                                                                                       !appl_83 <- kl_Parse_shen_LBside_conditionsRB `pseq` kl_shen_LBpremisesRB kl_Parse_shen_LBside_conditionsRB
                                                                                                                                                       appl_83 `pseq` applyWrapper appl_50 [appl_83]) (do let !aw_84 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                          applyWrapper aw_84 []))))
                                           !appl_85 <- kl_V1372 `pseq` kl_shen_LBside_conditionsRB kl_V1372
                                           !appl_86 <- appl_85 `pseq` applyWrapper appl_45 [appl_85]
                                           appl_86 `pseq` applyWrapper appl_0 [appl_86]

kl_shen_LBside_conditionsRB :: Types.KLValue ->
                               Types.KLContext Types.Env Types.KLValue
kl_shen_LBside_conditionsRB (!kl_V1373) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                 !appl_2 <- applyWrapper aw_1 []
                                                                                                                 !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                                 klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_LBeRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                        !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                        !appl_7 <- appl_6 `pseq` (kl_Parse_LBeRB `pseq` eq appl_6 kl_Parse_LBeRB)
                                                                                                                                                                                                        !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                        klIf kl_if_8 (do !appl_9 <- kl_Parse_LBeRB `pseq` hd kl_Parse_LBeRB
                                                                                                                                                                                                                         let !appl_10 = List []
                                                                                                                                                                                                                         let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                         appl_9 `pseq` (appl_10 `pseq` applyWrapper aw_11 [appl_9,
                                                                                                                                                                                                                                                                           appl_10])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                          applyWrapper aw_12 []))))
                                                                                                                                  let !aw_13 = Types.Atom (Types.UnboundSym "<e>")
                                                                                                                                  !appl_14 <- kl_V1373 `pseq` applyWrapper aw_13 [kl_V1373]
                                                                                                                                  appl_14 `pseq` applyWrapper appl_4 [appl_14]) (do return kl_YaccParse))))
                                             let !appl_15 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBside_conditionRB) -> do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                      !appl_17 <- applyWrapper aw_16 []
                                                                                                                                      !appl_18 <- appl_17 `pseq` (kl_Parse_shen_LBside_conditionRB `pseq` eq appl_17 kl_Parse_shen_LBside_conditionRB)
                                                                                                                                      !kl_if_19 <- appl_18 `pseq` kl_not appl_18
                                                                                                                                      klIf kl_if_19 (do let !appl_20 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBside_conditionsRB) -> do let !aw_21 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                  !appl_22 <- applyWrapper aw_21 []
                                                                                                                                                                                                                                                  !appl_23 <- appl_22 `pseq` (kl_Parse_shen_LBside_conditionsRB `pseq` eq appl_22 kl_Parse_shen_LBside_conditionsRB)
                                                                                                                                                                                                                                                  !kl_if_24 <- appl_23 `pseq` kl_not appl_23
                                                                                                                                                                                                                                                  klIf kl_if_24 (do !appl_25 <- kl_Parse_shen_LBside_conditionsRB `pseq` hd kl_Parse_shen_LBside_conditionsRB
                                                                                                                                                                                                                                                                    let !aw_26 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                    !appl_27 <- kl_Parse_shen_LBside_conditionRB `pseq` applyWrapper aw_26 [kl_Parse_shen_LBside_conditionRB]
                                                                                                                                                                                                                                                                    let !aw_28 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                    !appl_29 <- kl_Parse_shen_LBside_conditionsRB `pseq` applyWrapper aw_28 [kl_Parse_shen_LBside_conditionsRB]
                                                                                                                                                                                                                                                                    !appl_30 <- appl_27 `pseq` (appl_29 `pseq` klCons appl_27 appl_29)
                                                                                                                                                                                                                                                                    let !aw_31 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                    appl_25 `pseq` (appl_30 `pseq` applyWrapper aw_31 [appl_25,
                                                                                                                                                                                                                                                                                                                       appl_30])) (do let !aw_32 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                      applyWrapper aw_32 []))))
                                                                                                                                                        !appl_33 <- kl_Parse_shen_LBside_conditionRB `pseq` kl_shen_LBside_conditionsRB kl_Parse_shen_LBside_conditionRB
                                                                                                                                                        appl_33 `pseq` applyWrapper appl_20 [appl_33]) (do let !aw_34 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                           applyWrapper aw_34 []))))
                                             !appl_35 <- kl_V1373 `pseq` kl_shen_LBside_conditionRB kl_V1373
                                             !appl_36 <- appl_35 `pseq` applyWrapper appl_15 [appl_35]
                                             appl_36 `pseq` applyWrapper appl_0 [appl_36]

kl_shen_LBside_conditionRB :: Types.KLValue ->
                              Types.KLContext Types.Env Types.KLValue
kl_shen_LBside_conditionRB (!kl_V1374) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                !appl_2 <- applyWrapper aw_1 []
                                                                                                                !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                                klIf kl_if_3 (do !appl_4 <- kl_V1374 `pseq` hd kl_V1374
                                                                                                                                 !kl_if_5 <- appl_4 `pseq` consP appl_4
                                                                                                                                 !kl_if_6 <- klIf kl_if_5 (do !appl_7 <- kl_V1374 `pseq` hd kl_V1374
                                                                                                                                                              !appl_8 <- appl_7 `pseq` hd appl_7
                                                                                                                                                              appl_8 `pseq` eq (Types.Atom (Types.UnboundSym "let")) appl_8) (do return (Atom (B False)))
                                                                                                                                 klIf kl_if_6 (do let !appl_9 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBvariablePRB) -> do let !aw_10 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                     !appl_11 <- applyWrapper aw_10 []
                                                                                                                                                                                                                                     !appl_12 <- appl_11 `pseq` (kl_Parse_shen_LBvariablePRB `pseq` eq appl_11 kl_Parse_shen_LBvariablePRB)
                                                                                                                                                                                                                                     !kl_if_13 <- appl_12 `pseq` kl_not appl_12
                                                                                                                                                                                                                                     klIf kl_if_13 (do let !appl_14 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBexprRB) -> do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                      !appl_16 <- applyWrapper aw_15 []
                                                                                                                                                                                                                                                                                                                                      !appl_17 <- appl_16 `pseq` (kl_Parse_shen_LBexprRB `pseq` eq appl_16 kl_Parse_shen_LBexprRB)
                                                                                                                                                                                                                                                                                                                                      !kl_if_18 <- appl_17 `pseq` kl_not appl_17
                                                                                                                                                                                                                                                                                                                                      klIf kl_if_18 (do !appl_19 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                                                                                                                                                                                                                                        let !aw_20 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                        !appl_21 <- kl_Parse_shen_LBvariablePRB `pseq` applyWrapper aw_20 [kl_Parse_shen_LBvariablePRB]
                                                                                                                                                                                                                                                                                                                                                        let !aw_22 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                        !appl_23 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_22 [kl_Parse_shen_LBexprRB]
                                                                                                                                                                                                                                                                                                                                                        let !appl_24 = List []
                                                                                                                                                                                                                                                                                                                                                        !appl_25 <- appl_23 `pseq` (appl_24 `pseq` klCons appl_23 appl_24)
                                                                                                                                                                                                                                                                                                                                                        !appl_26 <- appl_21 `pseq` (appl_25 `pseq` klCons appl_21 appl_25)
                                                                                                                                                                                                                                                                                                                                                        !appl_27 <- appl_26 `pseq` klCons (Types.Atom (Types.UnboundSym "let")) appl_26
                                                                                                                                                                                                                                                                                                                                                        let !aw_28 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                        appl_19 `pseq` (appl_27 `pseq` applyWrapper aw_28 [appl_19,
                                                                                                                                                                                                                                                                                                                                                                                                           appl_27])) (do let !aw_29 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                          applyWrapper aw_29 []))))
                                                                                                                                                                                                                                                       !appl_30 <- kl_Parse_shen_LBvariablePRB `pseq` kl_shen_LBexprRB kl_Parse_shen_LBvariablePRB
                                                                                                                                                                                                                                                       appl_30 `pseq` applyWrapper appl_14 [appl_30]) (do let !aw_31 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                          applyWrapper aw_31 []))))
                                                                                                                                                  !appl_32 <- kl_V1374 `pseq` hd kl_V1374
                                                                                                                                                  !appl_33 <- appl_32 `pseq` tl appl_32
                                                                                                                                                  let !aw_34 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                  !appl_35 <- kl_V1374 `pseq` applyWrapper aw_34 [kl_V1374]
                                                                                                                                                  let !aw_36 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                  !appl_37 <- appl_33 `pseq` (appl_35 `pseq` applyWrapper aw_36 [appl_33,
                                                                                                                                                                                                                 appl_35])
                                                                                                                                                  !appl_38 <- appl_37 `pseq` kl_shen_LBvariablePRB appl_37
                                                                                                                                                  appl_38 `pseq` applyWrapper appl_9 [appl_38]) (do let !aw_39 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                    applyWrapper aw_39 [])) (do return kl_YaccParse))))
                                            !appl_40 <- kl_V1374 `pseq` hd kl_V1374
                                            !kl_if_41 <- appl_40 `pseq` consP appl_40
                                            !kl_if_42 <- klIf kl_if_41 (do !appl_43 <- kl_V1374 `pseq` hd kl_V1374
                                                                           !appl_44 <- appl_43 `pseq` hd appl_43
                                                                           appl_44 `pseq` eq (Types.Atom (Types.UnboundSym "if")) appl_44) (do return (Atom (B False)))
                                            !appl_45 <- klIf kl_if_42 (do let !appl_46 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBexprRB) -> do let !aw_47 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                         !appl_48 <- applyWrapper aw_47 []
                                                                                                                                                         !appl_49 <- appl_48 `pseq` (kl_Parse_shen_LBexprRB `pseq` eq appl_48 kl_Parse_shen_LBexprRB)
                                                                                                                                                         !kl_if_50 <- appl_49 `pseq` kl_not appl_49
                                                                                                                                                         klIf kl_if_50 (do !appl_51 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                                                           let !aw_52 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                           !appl_53 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_52 [kl_Parse_shen_LBexprRB]
                                                                                                                                                                           let !appl_54 = List []
                                                                                                                                                                           !appl_55 <- appl_53 `pseq` (appl_54 `pseq` klCons appl_53 appl_54)
                                                                                                                                                                           !appl_56 <- appl_55 `pseq` klCons (Types.Atom (Types.UnboundSym "if")) appl_55
                                                                                                                                                                           let !aw_57 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                           appl_51 `pseq` (appl_56 `pseq` applyWrapper aw_57 [appl_51,
                                                                                                                                                                                                                              appl_56])) (do let !aw_58 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                             applyWrapper aw_58 []))))
                                                                          !appl_59 <- kl_V1374 `pseq` hd kl_V1374
                                                                          !appl_60 <- appl_59 `pseq` tl appl_59
                                                                          let !aw_61 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                          !appl_62 <- kl_V1374 `pseq` applyWrapper aw_61 [kl_V1374]
                                                                          let !aw_63 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                          !appl_64 <- appl_60 `pseq` (appl_62 `pseq` applyWrapper aw_63 [appl_60,
                                                                                                                                         appl_62])
                                                                          !appl_65 <- appl_64 `pseq` kl_shen_LBexprRB appl_64
                                                                          appl_65 `pseq` applyWrapper appl_46 [appl_65]) (do let !aw_66 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                             applyWrapper aw_66 [])
                                            appl_45 `pseq` applyWrapper appl_0 [appl_45]

kl_shen_LBvariablePRB :: Types.KLValue ->
                         Types.KLContext Types.Env Types.KLValue
kl_shen_LBvariablePRB (!kl_V1375) = do !appl_0 <- kl_V1375 `pseq` hd kl_V1375
                                       !kl_if_1 <- appl_0 `pseq` consP appl_0
                                       klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do !kl_if_3 <- kl_Parse_X `pseq` kl_variableP kl_Parse_X
                                                                                                                          klIf kl_if_3 (do !appl_4 <- kl_V1375 `pseq` hd kl_V1375
                                                                                                                                           !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                                                                           let !aw_6 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                           !appl_7 <- kl_V1375 `pseq` applyWrapper aw_6 [kl_V1375]
                                                                                                                                           let !aw_8 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                           !appl_9 <- appl_5 `pseq` (appl_7 `pseq` applyWrapper aw_8 [appl_5,
                                                                                                                                                                                                      appl_7])
                                                                                                                                           !appl_10 <- appl_9 `pseq` hd appl_9
                                                                                                                                           let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                           appl_10 `pseq` (kl_Parse_X `pseq` applyWrapper aw_11 [appl_10,
                                                                                                                                                                                                 kl_Parse_X])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                   applyWrapper aw_12 []))))
                                                        !appl_13 <- kl_V1375 `pseq` hd kl_V1375
                                                        !appl_14 <- appl_13 `pseq` hd appl_13
                                                        appl_14 `pseq` applyWrapper appl_2 [appl_14]) (do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                          applyWrapper aw_15 [])

kl_shen_LBexprRB :: Types.KLValue ->
                    Types.KLContext Types.Env Types.KLValue
kl_shen_LBexprRB (!kl_V1376) = do !appl_0 <- kl_V1376 `pseq` hd kl_V1376
                                  !kl_if_1 <- appl_0 `pseq` consP appl_0
                                  klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do let !appl_3 = List []
                                                                                                                     !appl_4 <- appl_3 `pseq` klCons (Types.Atom (Types.UnboundSym ";")) appl_3
                                                                                                                     !appl_5 <- appl_4 `pseq` klCons (Types.Atom (Types.UnboundSym ">>")) appl_4
                                                                                                                     !kl_if_6 <- kl_Parse_X `pseq` (appl_5 `pseq` kl_elementP kl_Parse_X appl_5)
                                                                                                                     !appl_7 <- klIf kl_if_6 (do return (Atom (B True))) (do !kl_if_8 <- kl_Parse_X `pseq` kl_shen_singleunderlineP kl_Parse_X
                                                                                                                                                                             klIf kl_if_8 (do return (Atom (B True))) (do kl_Parse_X `pseq` kl_shen_doubleunderlineP kl_Parse_X))
                                                                                                                     !kl_if_9 <- appl_7 `pseq` kl_not appl_7
                                                                                                                     klIf kl_if_9 (do !appl_10 <- kl_V1376 `pseq` hd kl_V1376
                                                                                                                                      !appl_11 <- appl_10 `pseq` tl appl_10
                                                                                                                                      let !aw_12 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                      !appl_13 <- kl_V1376 `pseq` applyWrapper aw_12 [kl_V1376]
                                                                                                                                      let !aw_14 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                      !appl_15 <- appl_11 `pseq` (appl_13 `pseq` applyWrapper aw_14 [appl_11,
                                                                                                                                                                                                     appl_13])
                                                                                                                                      !appl_16 <- appl_15 `pseq` hd appl_15
                                                                                                                                      !appl_17 <- kl_Parse_X `pseq` kl_shen_remove_bar kl_Parse_X
                                                                                                                                      let !aw_18 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                      appl_16 `pseq` (appl_17 `pseq` applyWrapper aw_18 [appl_16,
                                                                                                                                                                                         appl_17])) (do let !aw_19 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                        applyWrapper aw_19 []))))
                                                   !appl_20 <- kl_V1376 `pseq` hd kl_V1376
                                                   !appl_21 <- appl_20 `pseq` hd appl_20
                                                   appl_21 `pseq` applyWrapper appl_2 [appl_21]) (do let !aw_22 = Types.Atom (Types.UnboundSym "fail")
                                                                                                     applyWrapper aw_22 [])

kl_shen_remove_bar :: Types.KLValue ->
                      Types.KLContext Types.Env Types.KLValue
kl_shen_remove_bar (!kl_V1377) = do !kl_if_0 <- kl_V1377 `pseq` consP kl_V1377
                                    !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1377 `pseq` tl kl_V1377
                                                                 !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                                 klIf kl_if_3 (do !appl_4 <- kl_V1377 `pseq` tl kl_V1377
                                                                                  !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                  !kl_if_6 <- appl_5 `pseq` consP appl_5
                                                                                  klIf kl_if_6 (do let !appl_7 = List []
                                                                                                   !appl_8 <- kl_V1377 `pseq` tl kl_V1377
                                                                                                   !appl_9 <- appl_8 `pseq` tl appl_8
                                                                                                   !appl_10 <- appl_9 `pseq` tl appl_9
                                                                                                   !kl_if_11 <- appl_7 `pseq` (appl_10 `pseq` eq appl_7 appl_10)
                                                                                                   klIf kl_if_11 (do !appl_12 <- kl_V1377 `pseq` tl kl_V1377
                                                                                                                     !appl_13 <- appl_12 `pseq` hd appl_12
                                                                                                                     appl_13 `pseq` eq appl_13 (Types.Atom (Types.UnboundSym "bar!"))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                    klIf kl_if_1 (do !appl_14 <- kl_V1377 `pseq` hd kl_V1377
                                                     !appl_15 <- kl_V1377 `pseq` tl kl_V1377
                                                     !appl_16 <- appl_15 `pseq` tl appl_15
                                                     !appl_17 <- appl_16 `pseq` hd appl_16
                                                     appl_14 `pseq` (appl_17 `pseq` klCons appl_14 appl_17)) (do !kl_if_18 <- kl_V1377 `pseq` consP kl_V1377
                                                                                                                 klIf kl_if_18 (do !appl_19 <- kl_V1377 `pseq` hd kl_V1377
                                                                                                                                   !appl_20 <- appl_19 `pseq` kl_shen_remove_bar appl_19
                                                                                                                                   !appl_21 <- kl_V1377 `pseq` tl kl_V1377
                                                                                                                                   !appl_22 <- appl_21 `pseq` kl_shen_remove_bar appl_21
                                                                                                                                   appl_20 `pseq` (appl_22 `pseq` klCons appl_20 appl_22)) (do klIf (Atom (B True)) (do return kl_V1377) (do return (List []))))

kl_shen_LBpremisesRB :: Types.KLValue ->
                        Types.KLContext Types.Env Types.KLValue
kl_shen_LBpremisesRB (!kl_V1378) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                          !appl_2 <- applyWrapper aw_1 []
                                                                                                          !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                          klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_LBeRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                 !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                 !appl_7 <- appl_6 `pseq` (kl_Parse_LBeRB `pseq` eq appl_6 kl_Parse_LBeRB)
                                                                                                                                                                                                 !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                 klIf kl_if_8 (do !appl_9 <- kl_Parse_LBeRB `pseq` hd kl_Parse_LBeRB
                                                                                                                                                                                                                  let !appl_10 = List []
                                                                                                                                                                                                                  let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                  appl_9 `pseq` (appl_10 `pseq` applyWrapper aw_11 [appl_9,
                                                                                                                                                                                                                                                                    appl_10])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                   applyWrapper aw_12 []))))
                                                                                                                           let !aw_13 = Types.Atom (Types.UnboundSym "<e>")
                                                                                                                           !appl_14 <- kl_V1378 `pseq` applyWrapper aw_13 [kl_V1378]
                                                                                                                           appl_14 `pseq` applyWrapper appl_4 [appl_14]) (do return kl_YaccParse))))
                                      let !appl_15 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBpremiseRB) -> do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                        !appl_17 <- applyWrapper aw_16 []
                                                                                                                        !appl_18 <- appl_17 `pseq` (kl_Parse_shen_LBpremiseRB `pseq` eq appl_17 kl_Parse_shen_LBpremiseRB)
                                                                                                                        !kl_if_19 <- appl_18 `pseq` kl_not appl_18
                                                                                                                        klIf kl_if_19 (do let !appl_20 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBsemicolon_symbolRB) -> do let !aw_21 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                     !appl_22 <- applyWrapper aw_21 []
                                                                                                                                                                                                                                     !appl_23 <- appl_22 `pseq` (kl_Parse_shen_LBsemicolon_symbolRB `pseq` eq appl_22 kl_Parse_shen_LBsemicolon_symbolRB)
                                                                                                                                                                                                                                     !kl_if_24 <- appl_23 `pseq` kl_not appl_23
                                                                                                                                                                                                                                     klIf kl_if_24 (do let !appl_25 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBpremisesRB) -> do let !aw_26 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                          !appl_27 <- applyWrapper aw_26 []
                                                                                                                                                                                                                                                                                                                                          !appl_28 <- appl_27 `pseq` (kl_Parse_shen_LBpremisesRB `pseq` eq appl_27 kl_Parse_shen_LBpremisesRB)
                                                                                                                                                                                                                                                                                                                                          !kl_if_29 <- appl_28 `pseq` kl_not appl_28
                                                                                                                                                                                                                                                                                                                                          klIf kl_if_29 (do !appl_30 <- kl_Parse_shen_LBpremisesRB `pseq` hd kl_Parse_shen_LBpremisesRB
                                                                                                                                                                                                                                                                                                                                                            let !aw_31 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                            !appl_32 <- kl_Parse_shen_LBpremiseRB `pseq` applyWrapper aw_31 [kl_Parse_shen_LBpremiseRB]
                                                                                                                                                                                                                                                                                                                                                            let !aw_33 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                            !appl_34 <- kl_Parse_shen_LBpremisesRB `pseq` applyWrapper aw_33 [kl_Parse_shen_LBpremisesRB]
                                                                                                                                                                                                                                                                                                                                                            !appl_35 <- appl_32 `pseq` (appl_34 `pseq` klCons appl_32 appl_34)
                                                                                                                                                                                                                                                                                                                                                            let !aw_36 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                            appl_30 `pseq` (appl_35 `pseq` applyWrapper aw_36 [appl_30,
                                                                                                                                                                                                                                                                                                                                                                                                               appl_35])) (do let !aw_37 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                              applyWrapper aw_37 []))))
                                                                                                                                                                                                                                                       !appl_38 <- kl_Parse_shen_LBsemicolon_symbolRB `pseq` kl_shen_LBpremisesRB kl_Parse_shen_LBsemicolon_symbolRB
                                                                                                                                                                                                                                                       appl_38 `pseq` applyWrapper appl_25 [appl_38]) (do let !aw_39 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                          applyWrapper aw_39 []))))
                                                                                                                                          !appl_40 <- kl_Parse_shen_LBpremiseRB `pseq` kl_shen_LBsemicolon_symbolRB kl_Parse_shen_LBpremiseRB
                                                                                                                                          appl_40 `pseq` applyWrapper appl_20 [appl_40]) (do let !aw_41 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                             applyWrapper aw_41 []))))
                                      !appl_42 <- kl_V1378 `pseq` kl_shen_LBpremiseRB kl_V1378
                                      !appl_43 <- appl_42 `pseq` applyWrapper appl_15 [appl_42]
                                      appl_43 `pseq` applyWrapper appl_0 [appl_43]

kl_shen_LBsemicolon_symbolRB :: Types.KLValue ->
                                Types.KLContext Types.Env Types.KLValue
kl_shen_LBsemicolon_symbolRB (!kl_V1379) = do !appl_0 <- kl_V1379 `pseq` hd kl_V1379
                                              !kl_if_1 <- appl_0 `pseq` consP appl_0
                                              klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do !kl_if_3 <- kl_Parse_X `pseq` eq kl_Parse_X (Types.Atom (Types.UnboundSym ";"))
                                                                                                                                 klIf kl_if_3 (do !appl_4 <- kl_V1379 `pseq` hd kl_V1379
                                                                                                                                                  !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                                                                                  let !aw_6 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                  !appl_7 <- kl_V1379 `pseq` applyWrapper aw_6 [kl_V1379]
                                                                                                                                                  let !aw_8 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                  !appl_9 <- appl_5 `pseq` (appl_7 `pseq` applyWrapper aw_8 [appl_5,
                                                                                                                                                                                                             appl_7])
                                                                                                                                                  !appl_10 <- appl_9 `pseq` hd appl_9
                                                                                                                                                  let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                  appl_10 `pseq` applyWrapper aw_11 [appl_10,
                                                                                                                                                                                     Types.Atom (Types.UnboundSym "shen.skip")]) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                     applyWrapper aw_12 []))))
                                                               !appl_13 <- kl_V1379 `pseq` hd kl_V1379
                                                               !appl_14 <- appl_13 `pseq` hd appl_13
                                                               appl_14 `pseq` applyWrapper appl_2 [appl_14]) (do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                 applyWrapper aw_15 [])

kl_shen_LBpremiseRB :: Types.KLValue ->
                       Types.KLContext Types.Env Types.KLValue
kl_shen_LBpremiseRB (!kl_V1380) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                         !appl_2 <- applyWrapper aw_1 []
                                                                                                         !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                         klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                              !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                              !kl_if_7 <- kl_YaccParse `pseq` (appl_6 `pseq` eq kl_YaccParse appl_6)
                                                                                                                                                                                              klIf kl_if_7 (do let !appl_8 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_9 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                !appl_10 <- applyWrapper aw_9 []
                                                                                                                                                                                                                                                                                                !appl_11 <- appl_10 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_10 kl_Parse_shen_LBformulaRB)
                                                                                                                                                                                                                                                                                                !kl_if_12 <- appl_11 `pseq` kl_not appl_11
                                                                                                                                                                                                                                                                                                klIf kl_if_12 (do !appl_13 <- kl_Parse_shen_LBformulaRB `pseq` hd kl_Parse_shen_LBformulaRB
                                                                                                                                                                                                                                                                                                                  let !appl_14 = List []
                                                                                                                                                                                                                                                                                                                  let !aw_15 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                  !appl_16 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_15 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                                                                                                                  !appl_17 <- appl_14 `pseq` (appl_16 `pseq` kl_shen_sequent appl_14 appl_16)
                                                                                                                                                                                                                                                                                                                  let !aw_18 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                  appl_13 `pseq` (appl_17 `pseq` applyWrapper aw_18 [appl_13,
                                                                                                                                                                                                                                                                                                                                                                     appl_17])) (do let !aw_19 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                    applyWrapper aw_19 []))))
                                                                                                                                                                                                               !appl_20 <- kl_V1380 `pseq` kl_shen_LBformulaRB kl_V1380
                                                                                                                                                                                                               appl_20 `pseq` applyWrapper appl_8 [appl_20]) (do return kl_YaccParse))))
                                                                                                                          let !appl_21 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaeRB) -> do let !aw_22 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                             !appl_23 <- applyWrapper aw_22 []
                                                                                                                                                                                                             !appl_24 <- appl_23 `pseq` (kl_Parse_shen_LBformulaeRB `pseq` eq appl_23 kl_Parse_shen_LBformulaeRB)
                                                                                                                                                                                                             !kl_if_25 <- appl_24 `pseq` kl_not appl_24
                                                                                                                                                                                                             klIf kl_if_25 (do !appl_26 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                                                                                               !kl_if_27 <- appl_26 `pseq` consP appl_26
                                                                                                                                                                                                                               !kl_if_28 <- klIf kl_if_27 (do !appl_29 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                                                                                                                              !appl_30 <- appl_29 `pseq` hd appl_29
                                                                                                                                                                                                                                                              appl_30 `pseq` eq (Types.Atom (Types.UnboundSym ">>")) appl_30) (do return (Atom (B False)))
                                                                                                                                                                                                                               klIf kl_if_28 (do let !appl_31 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_32 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                   !appl_33 <- applyWrapper aw_32 []
                                                                                                                                                                                                                                                                                                                                   !appl_34 <- appl_33 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_33 kl_Parse_shen_LBformulaRB)
                                                                                                                                                                                                                                                                                                                                   !kl_if_35 <- appl_34 `pseq` kl_not appl_34
                                                                                                                                                                                                                                                                                                                                   klIf kl_if_35 (do !appl_36 <- kl_Parse_shen_LBformulaRB `pseq` hd kl_Parse_shen_LBformulaRB
                                                                                                                                                                                                                                                                                                                                                     let !aw_37 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                     !appl_38 <- kl_Parse_shen_LBformulaeRB `pseq` applyWrapper aw_37 [kl_Parse_shen_LBformulaeRB]
                                                                                                                                                                                                                                                                                                                                                     let !aw_39 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                     !appl_40 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_39 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                                                                                                                                                     !appl_41 <- appl_38 `pseq` (appl_40 `pseq` kl_shen_sequent appl_38 appl_40)
                                                                                                                                                                                                                                                                                                                                                     let !aw_42 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                     appl_36 `pseq` (appl_41 `pseq` applyWrapper aw_42 [appl_36,
                                                                                                                                                                                                                                                                                                                                                                                                        appl_41])) (do let !aw_43 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                       applyWrapper aw_43 []))))
                                                                                                                                                                                                                                                 !appl_44 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                                                                                                                 !appl_45 <- appl_44 `pseq` tl appl_44
                                                                                                                                                                                                                                                 let !aw_46 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                 !appl_47 <- kl_Parse_shen_LBformulaeRB `pseq` applyWrapper aw_46 [kl_Parse_shen_LBformulaeRB]
                                                                                                                                                                                                                                                 let !aw_48 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                 !appl_49 <- appl_45 `pseq` (appl_47 `pseq` applyWrapper aw_48 [appl_45,
                                                                                                                                                                                                                                                                                                                appl_47])
                                                                                                                                                                                                                                                 !appl_50 <- appl_49 `pseq` kl_shen_LBformulaRB appl_49
                                                                                                                                                                                                                                                 appl_50 `pseq` applyWrapper appl_31 [appl_50]) (do let !aw_51 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                    applyWrapper aw_51 [])) (do let !aw_52 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                applyWrapper aw_52 []))))
                                                                                                                          !appl_53 <- kl_V1380 `pseq` kl_shen_LBformulaeRB kl_V1380
                                                                                                                          !appl_54 <- appl_53 `pseq` applyWrapper appl_21 [appl_53]
                                                                                                                          appl_54 `pseq` applyWrapper appl_4 [appl_54]) (do return kl_YaccParse))))
                                     !appl_55 <- kl_V1380 `pseq` hd kl_V1380
                                     !kl_if_56 <- appl_55 `pseq` consP appl_55
                                     !kl_if_57 <- klIf kl_if_56 (do !appl_58 <- kl_V1380 `pseq` hd kl_V1380
                                                                    !appl_59 <- appl_58 `pseq` hd appl_58
                                                                    appl_59 `pseq` eq (Types.Atom (Types.UnboundSym "!")) appl_59) (do return (Atom (B False)))
                                     !appl_60 <- klIf kl_if_57 (do !appl_61 <- kl_V1380 `pseq` hd kl_V1380
                                                                   !appl_62 <- appl_61 `pseq` tl appl_61
                                                                   let !aw_63 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                   !appl_64 <- kl_V1380 `pseq` applyWrapper aw_63 [kl_V1380]
                                                                   let !aw_65 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                   !appl_66 <- appl_62 `pseq` (appl_64 `pseq` applyWrapper aw_65 [appl_62,
                                                                                                                                  appl_64])
                                                                   !appl_67 <- appl_66 `pseq` hd appl_66
                                                                   let !aw_68 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                   appl_67 `pseq` applyWrapper aw_68 [appl_67,
                                                                                                      Types.Atom (Types.UnboundSym "!")]) (do let !aw_69 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                              applyWrapper aw_69 [])
                                     appl_60 `pseq` applyWrapper appl_0 [appl_60]

kl_shen_LBconclusionRB :: Types.KLValue ->
                          Types.KLContext Types.Env Types.KLValue
kl_shen_LBconclusionRB (!kl_V1381) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                            !appl_2 <- applyWrapper aw_1 []
                                                                                                            !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                            klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                              !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                              !appl_7 <- appl_6 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_6 kl_Parse_shen_LBformulaRB)
                                                                                                                                                                                                              !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                              klIf kl_if_8 (do let !appl_9 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBsemicolon_symbolRB) -> do let !aw_10 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                         !appl_11 <- applyWrapper aw_10 []
                                                                                                                                                                                                                                                                                                                         !appl_12 <- appl_11 `pseq` (kl_Parse_shen_LBsemicolon_symbolRB `pseq` eq appl_11 kl_Parse_shen_LBsemicolon_symbolRB)
                                                                                                                                                                                                                                                                                                                         !kl_if_13 <- appl_12 `pseq` kl_not appl_12
                                                                                                                                                                                                                                                                                                                         klIf kl_if_13 (do !appl_14 <- kl_Parse_shen_LBsemicolon_symbolRB `pseq` hd kl_Parse_shen_LBsemicolon_symbolRB
                                                                                                                                                                                                                                                                                                                                           let !appl_15 = List []
                                                                                                                                                                                                                                                                                                                                           let !aw_16 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                           !appl_17 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_16 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                                                                                                                                           !appl_18 <- appl_15 `pseq` (appl_17 `pseq` kl_shen_sequent appl_15 appl_17)
                                                                                                                                                                                                                                                                                                                                           let !aw_19 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                           appl_14 `pseq` (appl_18 `pseq` applyWrapper aw_19 [appl_14,
                                                                                                                                                                                                                                                                                                                                                                                              appl_18])) (do let !aw_20 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                             applyWrapper aw_20 []))))
                                                                                                                                                                                                                               !appl_21 <- kl_Parse_shen_LBformulaRB `pseq` kl_shen_LBsemicolon_symbolRB kl_Parse_shen_LBformulaRB
                                                                                                                                                                                                                               appl_21 `pseq` applyWrapper appl_9 [appl_21]) (do let !aw_22 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                 applyWrapper aw_22 []))))
                                                                                                                             !appl_23 <- kl_V1381 `pseq` kl_shen_LBformulaRB kl_V1381
                                                                                                                             appl_23 `pseq` applyWrapper appl_4 [appl_23]) (do return kl_YaccParse))))
                                        let !appl_24 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaeRB) -> do let !aw_25 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                           !appl_26 <- applyWrapper aw_25 []
                                                                                                                           !appl_27 <- appl_26 `pseq` (kl_Parse_shen_LBformulaeRB `pseq` eq appl_26 kl_Parse_shen_LBformulaeRB)
                                                                                                                           !kl_if_28 <- appl_27 `pseq` kl_not appl_27
                                                                                                                           klIf kl_if_28 (do !appl_29 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                             !kl_if_30 <- appl_29 `pseq` consP appl_29
                                                                                                                                             !kl_if_31 <- klIf kl_if_30 (do !appl_32 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                                            !appl_33 <- appl_32 `pseq` hd appl_32
                                                                                                                                                                            appl_33 `pseq` eq (Types.Atom (Types.UnboundSym ">>")) appl_33) (do return (Atom (B False)))
                                                                                                                                             klIf kl_if_31 (do let !appl_34 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_35 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                 !appl_36 <- applyWrapper aw_35 []
                                                                                                                                                                                                                                                 !appl_37 <- appl_36 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_36 kl_Parse_shen_LBformulaRB)
                                                                                                                                                                                                                                                 !kl_if_38 <- appl_37 `pseq` kl_not appl_37
                                                                                                                                                                                                                                                 klIf kl_if_38 (do let !appl_39 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBsemicolon_symbolRB) -> do let !aw_40 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                              !appl_41 <- applyWrapper aw_40 []
                                                                                                                                                                                                                                                                                                                                                              !appl_42 <- appl_41 `pseq` (kl_Parse_shen_LBsemicolon_symbolRB `pseq` eq appl_41 kl_Parse_shen_LBsemicolon_symbolRB)
                                                                                                                                                                                                                                                                                                                                                              !kl_if_43 <- appl_42 `pseq` kl_not appl_42
                                                                                                                                                                                                                                                                                                                                                              klIf kl_if_43 (do !appl_44 <- kl_Parse_shen_LBsemicolon_symbolRB `pseq` hd kl_Parse_shen_LBsemicolon_symbolRB
                                                                                                                                                                                                                                                                                                                                                                                let !aw_45 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                                                !appl_46 <- kl_Parse_shen_LBformulaeRB `pseq` applyWrapper aw_45 [kl_Parse_shen_LBformulaeRB]
                                                                                                                                                                                                                                                                                                                                                                                let !aw_47 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                                                !appl_48 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_47 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                                                                                                                                                                                !appl_49 <- appl_46 `pseq` (appl_48 `pseq` kl_shen_sequent appl_46 appl_48)
                                                                                                                                                                                                                                                                                                                                                                                let !aw_50 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                                                appl_44 `pseq` (appl_49 `pseq` applyWrapper aw_50 [appl_44,
                                                                                                                                                                                                                                                                                                                                                                                                                                   appl_49])) (do let !aw_51 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                                                  applyWrapper aw_51 []))))
                                                                                                                                                                                                                                                                   !appl_52 <- kl_Parse_shen_LBformulaRB `pseq` kl_shen_LBsemicolon_symbolRB kl_Parse_shen_LBformulaRB
                                                                                                                                                                                                                                                                   appl_52 `pseq` applyWrapper appl_39 [appl_52]) (do let !aw_53 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                      applyWrapper aw_53 []))))
                                                                                                                                                               !appl_54 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                               !appl_55 <- appl_54 `pseq` tl appl_54
                                                                                                                                                               let !aw_56 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                               !appl_57 <- kl_Parse_shen_LBformulaeRB `pseq` applyWrapper aw_56 [kl_Parse_shen_LBformulaeRB]
                                                                                                                                                               let !aw_58 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                               !appl_59 <- appl_55 `pseq` (appl_57 `pseq` applyWrapper aw_58 [appl_55,
                                                                                                                                                                                                                              appl_57])
                                                                                                                                                               !appl_60 <- appl_59 `pseq` kl_shen_LBformulaRB appl_59
                                                                                                                                                               appl_60 `pseq` applyWrapper appl_34 [appl_60]) (do let !aw_61 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                  applyWrapper aw_61 [])) (do let !aw_62 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                              applyWrapper aw_62 []))))
                                        !appl_63 <- kl_V1381 `pseq` kl_shen_LBformulaeRB kl_V1381
                                        !appl_64 <- appl_63 `pseq` applyWrapper appl_24 [appl_63]
                                        appl_64 `pseq` applyWrapper appl_0 [appl_64]

kl_shen_sequent :: Types.KLValue ->
                   Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_sequent (!kl_V1382) (!kl_V1383) = do kl_V1382 `pseq` (kl_V1383 `pseq` kl_Atp kl_V1382 kl_V1383)

kl_shen_LBformulaeRB :: Types.KLValue ->
                        Types.KLContext Types.Env Types.KLValue
kl_shen_LBformulaeRB (!kl_V1384) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                          !appl_2 <- applyWrapper aw_1 []
                                                                                                          !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                          klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                               !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                               !kl_if_7 <- kl_YaccParse `pseq` (appl_6 `pseq` eq kl_YaccParse appl_6)
                                                                                                                                                                                               klIf kl_if_7 (do let !appl_8 = ApplC (Func "lambda" (Context (\(!kl_Parse_LBeRB) -> do let !aw_9 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                      !appl_10 <- applyWrapper aw_9 []
                                                                                                                                                                                                                                                                                      !appl_11 <- appl_10 `pseq` (kl_Parse_LBeRB `pseq` eq appl_10 kl_Parse_LBeRB)
                                                                                                                                                                                                                                                                                      !kl_if_12 <- appl_11 `pseq` kl_not appl_11
                                                                                                                                                                                                                                                                                      klIf kl_if_12 (do !appl_13 <- kl_Parse_LBeRB `pseq` hd kl_Parse_LBeRB
                                                                                                                                                                                                                                                                                                        let !appl_14 = List []
                                                                                                                                                                                                                                                                                                        let !aw_15 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                        appl_13 `pseq` (appl_14 `pseq` applyWrapper aw_15 [appl_13,
                                                                                                                                                                                                                                                                                                                                                           appl_14])) (do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                          applyWrapper aw_16 []))))
                                                                                                                                                                                                                let !aw_17 = Types.Atom (Types.UnboundSym "<e>")
                                                                                                                                                                                                                !appl_18 <- kl_V1384 `pseq` applyWrapper aw_17 [kl_V1384]
                                                                                                                                                                                                                appl_18 `pseq` applyWrapper appl_8 [appl_18]) (do return kl_YaccParse))))
                                                                                                                           let !appl_19 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_20 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                             !appl_21 <- applyWrapper aw_20 []
                                                                                                                                                                                                             !appl_22 <- appl_21 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_21 kl_Parse_shen_LBformulaRB)
                                                                                                                                                                                                             !kl_if_23 <- appl_22 `pseq` kl_not appl_22
                                                                                                                                                                                                             klIf kl_if_23 (do !appl_24 <- kl_Parse_shen_LBformulaRB `pseq` hd kl_Parse_shen_LBformulaRB
                                                                                                                                                                                                                               let !aw_25 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                               !appl_26 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_25 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                               let !appl_27 = List []
                                                                                                                                                                                                                               !appl_28 <- appl_26 `pseq` (appl_27 `pseq` klCons appl_26 appl_27)
                                                                                                                                                                                                                               let !aw_29 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                               appl_24 `pseq` (appl_28 `pseq` applyWrapper aw_29 [appl_24,
                                                                                                                                                                                                                                                                                  appl_28])) (do let !aw_30 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                 applyWrapper aw_30 []))))
                                                                                                                           !appl_31 <- kl_V1384 `pseq` kl_shen_LBformulaRB kl_V1384
                                                                                                                           !appl_32 <- appl_31 `pseq` applyWrapper appl_19 [appl_31]
                                                                                                                           appl_32 `pseq` applyWrapper appl_4 [appl_32]) (do return kl_YaccParse))))
                                      let !appl_33 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaRB) -> do let !aw_34 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                        !appl_35 <- applyWrapper aw_34 []
                                                                                                                        !appl_36 <- appl_35 `pseq` (kl_Parse_shen_LBformulaRB `pseq` eq appl_35 kl_Parse_shen_LBformulaRB)
                                                                                                                        !kl_if_37 <- appl_36 `pseq` kl_not appl_36
                                                                                                                        klIf kl_if_37 (do let !appl_38 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBcomma_symbolRB) -> do let !aw_39 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                 !appl_40 <- applyWrapper aw_39 []
                                                                                                                                                                                                                                 !appl_41 <- appl_40 `pseq` (kl_Parse_shen_LBcomma_symbolRB `pseq` eq appl_40 kl_Parse_shen_LBcomma_symbolRB)
                                                                                                                                                                                                                                 !kl_if_42 <- appl_41 `pseq` kl_not appl_41
                                                                                                                                                                                                                                 klIf kl_if_42 (do let !appl_43 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBformulaeRB) -> do let !aw_44 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                      !appl_45 <- applyWrapper aw_44 []
                                                                                                                                                                                                                                                                                                                                      !appl_46 <- appl_45 `pseq` (kl_Parse_shen_LBformulaeRB `pseq` eq appl_45 kl_Parse_shen_LBformulaeRB)
                                                                                                                                                                                                                                                                                                                                      !kl_if_47 <- appl_46 `pseq` kl_not appl_46
                                                                                                                                                                                                                                                                                                                                      klIf kl_if_47 (do !appl_48 <- kl_Parse_shen_LBformulaeRB `pseq` hd kl_Parse_shen_LBformulaeRB
                                                                                                                                                                                                                                                                                                                                                        let !aw_49 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                        !appl_50 <- kl_Parse_shen_LBformulaRB `pseq` applyWrapper aw_49 [kl_Parse_shen_LBformulaRB]
                                                                                                                                                                                                                                                                                                                                                        let !aw_51 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                                                                                                                        !appl_52 <- kl_Parse_shen_LBformulaeRB `pseq` applyWrapper aw_51 [kl_Parse_shen_LBformulaeRB]
                                                                                                                                                                                                                                                                                                                                                        !appl_53 <- appl_50 `pseq` (appl_52 `pseq` klCons appl_50 appl_52)
                                                                                                                                                                                                                                                                                                                                                        let !aw_54 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                                                                                                                        appl_48 `pseq` (appl_53 `pseq` applyWrapper aw_54 [appl_48,
                                                                                                                                                                                                                                                                                                                                                                                                           appl_53])) (do let !aw_55 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                                                                                                                          applyWrapper aw_55 []))))
                                                                                                                                                                                                                                                   !appl_56 <- kl_Parse_shen_LBcomma_symbolRB `pseq` kl_shen_LBformulaeRB kl_Parse_shen_LBcomma_symbolRB
                                                                                                                                                                                                                                                   appl_56 `pseq` applyWrapper appl_43 [appl_56]) (do let !aw_57 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                      applyWrapper aw_57 []))))
                                                                                                                                          !appl_58 <- kl_Parse_shen_LBformulaRB `pseq` kl_shen_LBcomma_symbolRB kl_Parse_shen_LBformulaRB
                                                                                                                                          appl_58 `pseq` applyWrapper appl_38 [appl_58]) (do let !aw_59 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                             applyWrapper aw_59 []))))
                                      !appl_60 <- kl_V1384 `pseq` kl_shen_LBformulaRB kl_V1384
                                      !appl_61 <- appl_60 `pseq` applyWrapper appl_33 [appl_60]
                                      appl_61 `pseq` applyWrapper appl_0 [appl_61]

kl_shen_LBcomma_symbolRB :: Types.KLValue ->
                            Types.KLContext Types.Env Types.KLValue
kl_shen_LBcomma_symbolRB (!kl_V1385) = do !appl_0 <- kl_V1385 `pseq` hd kl_V1385
                                          !kl_if_1 <- appl_0 `pseq` consP appl_0
                                          klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do !appl_3 <- intern (Types.Atom (Types.Str ","))
                                                                                                                             !kl_if_4 <- kl_Parse_X `pseq` (appl_3 `pseq` eq kl_Parse_X appl_3)
                                                                                                                             klIf kl_if_4 (do !appl_5 <- kl_V1385 `pseq` hd kl_V1385
                                                                                                                                              !appl_6 <- appl_5 `pseq` tl appl_5
                                                                                                                                              let !aw_7 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                              !appl_8 <- kl_V1385 `pseq` applyWrapper aw_7 [kl_V1385]
                                                                                                                                              let !aw_9 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                              !appl_10 <- appl_6 `pseq` (appl_8 `pseq` applyWrapper aw_9 [appl_6,
                                                                                                                                                                                                          appl_8])
                                                                                                                                              !appl_11 <- appl_10 `pseq` hd appl_10
                                                                                                                                              let !aw_12 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                              appl_11 `pseq` applyWrapper aw_12 [appl_11,
                                                                                                                                                                                 Types.Atom (Types.UnboundSym "shen.skip")]) (do let !aw_13 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                 applyWrapper aw_13 []))))
                                                           !appl_14 <- kl_V1385 `pseq` hd kl_V1385
                                                           !appl_15 <- appl_14 `pseq` hd appl_14
                                                           appl_15 `pseq` applyWrapper appl_2 [appl_15]) (do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                             applyWrapper aw_16 [])

kl_shen_LBformulaRB :: Types.KLValue ->
                       Types.KLContext Types.Env Types.KLValue
kl_shen_LBformulaRB (!kl_V1386) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_YaccParse) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                         !appl_2 <- applyWrapper aw_1 []
                                                                                                         !kl_if_3 <- kl_YaccParse `pseq` (appl_2 `pseq` eq kl_YaccParse appl_2)
                                                                                                         klIf kl_if_3 (do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBexprRB) -> do let !aw_5 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                        !appl_6 <- applyWrapper aw_5 []
                                                                                                                                                                                                        !appl_7 <- appl_6 `pseq` (kl_Parse_shen_LBexprRB `pseq` eq appl_6 kl_Parse_shen_LBexprRB)
                                                                                                                                                                                                        !kl_if_8 <- appl_7 `pseq` kl_not appl_7
                                                                                                                                                                                                        klIf kl_if_8 (do !appl_9 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                                                                                                         let !aw_10 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                         !appl_11 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_10 [kl_Parse_shen_LBexprRB]
                                                                                                                                                                                                                         let !aw_12 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                         appl_9 `pseq` (appl_11 `pseq` applyWrapper aw_12 [appl_9,
                                                                                                                                                                                                                                                                           appl_11])) (do let !aw_13 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                          applyWrapper aw_13 []))))
                                                                                                                          !appl_14 <- kl_V1386 `pseq` kl_shen_LBexprRB kl_V1386
                                                                                                                          appl_14 `pseq` applyWrapper appl_4 [appl_14]) (do return kl_YaccParse))))
                                     let !appl_15 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBexprRB) -> do let !aw_16 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                    !appl_17 <- applyWrapper aw_16 []
                                                                                                                    !appl_18 <- appl_17 `pseq` (kl_Parse_shen_LBexprRB `pseq` eq appl_17 kl_Parse_shen_LBexprRB)
                                                                                                                    !kl_if_19 <- appl_18 `pseq` kl_not appl_18
                                                                                                                    klIf kl_if_19 (do !appl_20 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                      !kl_if_21 <- appl_20 `pseq` consP appl_20
                                                                                                                                      !kl_if_22 <- klIf kl_if_21 (do !appl_23 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                                                     !appl_24 <- appl_23 `pseq` hd appl_23
                                                                                                                                                                     appl_24 `pseq` eq (Types.Atom (Types.UnboundSym ":")) appl_24) (do return (Atom (B False)))
                                                                                                                                      klIf kl_if_22 (do let !appl_25 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBtypeRB) -> do let !aw_26 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                       !appl_27 <- applyWrapper aw_26 []
                                                                                                                                                                                                                                       !appl_28 <- appl_27 `pseq` (kl_Parse_shen_LBtypeRB `pseq` eq appl_27 kl_Parse_shen_LBtypeRB)
                                                                                                                                                                                                                                       !kl_if_29 <- appl_28 `pseq` kl_not appl_28
                                                                                                                                                                                                                                       klIf kl_if_29 (do !appl_30 <- kl_Parse_shen_LBtypeRB `pseq` hd kl_Parse_shen_LBtypeRB
                                                                                                                                                                                                                                                         let !aw_31 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                         !appl_32 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_31 [kl_Parse_shen_LBexprRB]
                                                                                                                                                                                                                                                         let !aw_33 = Types.Atom (Types.UnboundSym "shen.curry")
                                                                                                                                                                                                                                                         !appl_34 <- appl_32 `pseq` applyWrapper aw_33 [appl_32]
                                                                                                                                                                                                                                                         let !aw_35 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                                                                                                                         !appl_36 <- kl_Parse_shen_LBtypeRB `pseq` applyWrapper aw_35 [kl_Parse_shen_LBtypeRB]
                                                                                                                                                                                                                                                         let !aw_37 = Types.Atom (Types.UnboundSym "shen.demodulate")
                                                                                                                                                                                                                                                         !appl_38 <- appl_36 `pseq` applyWrapper aw_37 [appl_36]
                                                                                                                                                                                                                                                         let !appl_39 = List []
                                                                                                                                                                                                                                                         !appl_40 <- appl_38 `pseq` (appl_39 `pseq` klCons appl_38 appl_39)
                                                                                                                                                                                                                                                         !appl_41 <- appl_40 `pseq` klCons (Types.Atom (Types.UnboundSym ":")) appl_40
                                                                                                                                                                                                                                                         !appl_42 <- appl_34 `pseq` (appl_41 `pseq` klCons appl_34 appl_41)
                                                                                                                                                                                                                                                         let !aw_43 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                                                                                                                         appl_30 `pseq` (appl_42 `pseq` applyWrapper aw_43 [appl_30,
                                                                                                                                                                                                                                                                                                            appl_42])) (do let !aw_44 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                                                                                                           applyWrapper aw_44 []))))
                                                                                                                                                        !appl_45 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                                        !appl_46 <- appl_45 `pseq` tl appl_45
                                                                                                                                                        let !aw_47 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                        !appl_48 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_47 [kl_Parse_shen_LBexprRB]
                                                                                                                                                        let !aw_49 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                        !appl_50 <- appl_46 `pseq` (appl_48 `pseq` applyWrapper aw_49 [appl_46,
                                                                                                                                                                                                                       appl_48])
                                                                                                                                                        !appl_51 <- appl_50 `pseq` kl_shen_LBtypeRB appl_50
                                                                                                                                                        appl_51 `pseq` applyWrapper appl_25 [appl_51]) (do let !aw_52 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                           applyWrapper aw_52 [])) (do let !aw_53 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                                       applyWrapper aw_53 []))))
                                     !appl_54 <- kl_V1386 `pseq` kl_shen_LBexprRB kl_V1386
                                     !appl_55 <- appl_54 `pseq` applyWrapper appl_15 [appl_54]
                                     appl_55 `pseq` applyWrapper appl_0 [appl_55]

kl_shen_LBtypeRB :: Types.KLValue ->
                    Types.KLContext Types.Env Types.KLValue
kl_shen_LBtypeRB (!kl_V1387) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_Parse_shen_LBexprRB) -> do let !aw_1 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                !appl_2 <- applyWrapper aw_1 []
                                                                                                                !appl_3 <- appl_2 `pseq` (kl_Parse_shen_LBexprRB `pseq` eq appl_2 kl_Parse_shen_LBexprRB)
                                                                                                                !kl_if_4 <- appl_3 `pseq` kl_not appl_3
                                                                                                                klIf kl_if_4 (do !appl_5 <- kl_Parse_shen_LBexprRB `pseq` hd kl_Parse_shen_LBexprRB
                                                                                                                                 let !aw_6 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                 !appl_7 <- kl_Parse_shen_LBexprRB `pseq` applyWrapper aw_6 [kl_Parse_shen_LBexprRB]
                                                                                                                                 !appl_8 <- appl_7 `pseq` kl_shen_curry_type appl_7
                                                                                                                                 let !aw_9 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                 appl_5 `pseq` (appl_8 `pseq` applyWrapper aw_9 [appl_5,
                                                                                                                                                                                 appl_8])) (do let !aw_10 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                               applyWrapper aw_10 []))))
                                  !appl_11 <- kl_V1387 `pseq` kl_shen_LBexprRB kl_V1387
                                  appl_11 `pseq` applyWrapper appl_0 [appl_11]

kl_shen_LBdoubleunderlineRB :: Types.KLValue ->
                               Types.KLContext Types.Env Types.KLValue
kl_shen_LBdoubleunderlineRB (!kl_V1388) = do !appl_0 <- kl_V1388 `pseq` hd kl_V1388
                                             !kl_if_1 <- appl_0 `pseq` consP appl_0
                                             klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do !kl_if_3 <- kl_Parse_X `pseq` kl_shen_doubleunderlineP kl_Parse_X
                                                                                                                                klIf kl_if_3 (do !appl_4 <- kl_V1388 `pseq` hd kl_V1388
                                                                                                                                                 !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                                                                                 let !aw_6 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                 !appl_7 <- kl_V1388 `pseq` applyWrapper aw_6 [kl_V1388]
                                                                                                                                                 let !aw_8 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                 !appl_9 <- appl_5 `pseq` (appl_7 `pseq` applyWrapper aw_8 [appl_5,
                                                                                                                                                                                                            appl_7])
                                                                                                                                                 !appl_10 <- appl_9 `pseq` hd appl_9
                                                                                                                                                 let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                 appl_10 `pseq` (kl_Parse_X `pseq` applyWrapper aw_11 [appl_10,
                                                                                                                                                                                                       kl_Parse_X])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                         applyWrapper aw_12 []))))
                                                              !appl_13 <- kl_V1388 `pseq` hd kl_V1388
                                                              !appl_14 <- appl_13 `pseq` hd appl_13
                                                              appl_14 `pseq` applyWrapper appl_2 [appl_14]) (do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                applyWrapper aw_15 [])

kl_shen_LBsingleunderlineRB :: Types.KLValue ->
                               Types.KLContext Types.Env Types.KLValue
kl_shen_LBsingleunderlineRB (!kl_V1389) = do !appl_0 <- kl_V1389 `pseq` hd kl_V1389
                                             !kl_if_1 <- appl_0 `pseq` consP appl_0
                                             klIf kl_if_1 (do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_Parse_X) -> do !kl_if_3 <- kl_Parse_X `pseq` kl_shen_singleunderlineP kl_Parse_X
                                                                                                                                klIf kl_if_3 (do !appl_4 <- kl_V1389 `pseq` hd kl_V1389
                                                                                                                                                 !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                                                                                 let !aw_6 = Types.Atom (Types.UnboundSym "shen.hdtl")
                                                                                                                                                 !appl_7 <- kl_V1389 `pseq` applyWrapper aw_6 [kl_V1389]
                                                                                                                                                 let !aw_8 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                 !appl_9 <- appl_5 `pseq` (appl_7 `pseq` applyWrapper aw_8 [appl_5,
                                                                                                                                                                                                            appl_7])
                                                                                                                                                 !appl_10 <- appl_9 `pseq` hd appl_9
                                                                                                                                                 let !aw_11 = Types.Atom (Types.UnboundSym "shen.pair")
                                                                                                                                                 appl_10 `pseq` (kl_Parse_X `pseq` applyWrapper aw_11 [appl_10,
                                                                                                                                                                                                       kl_Parse_X])) (do let !aw_12 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                                                                                                                         applyWrapper aw_12 []))))
                                                              !appl_13 <- kl_V1389 `pseq` hd kl_V1389
                                                              !appl_14 <- appl_13 `pseq` hd appl_13
                                                              appl_14 `pseq` applyWrapper appl_2 [appl_14]) (do let !aw_15 = Types.Atom (Types.UnboundSym "fail")
                                                                                                                applyWrapper aw_15 [])

kl_shen_singleunderlineP :: Types.KLValue ->
                            Types.KLContext Types.Env Types.KLValue
kl_shen_singleunderlineP (!kl_V1390) = do !kl_if_0 <- kl_V1390 `pseq` kl_symbolP kl_V1390
                                          klIf kl_if_0 (do !appl_1 <- kl_V1390 `pseq` str kl_V1390
                                                           appl_1 `pseq` kl_shen_shP appl_1) (do return (Atom (B False)))

kl_shen_shP :: Types.KLValue ->
               Types.KLContext Types.Env Types.KLValue
kl_shen_shP (!kl_V1391) = do !kl_if_0 <- kl_V1391 `pseq` eq (Types.Atom (Types.Str "_")) kl_V1391
                             klIf kl_if_0 (do return (Atom (B True))) (do klIf (Atom (B True)) (do !appl_1 <- kl_V1391 `pseq` pos kl_V1391 (Types.Atom (Types.N (Types.KI 0)))
                                                                                                   !kl_if_2 <- appl_1 `pseq` eq appl_1 (Types.Atom (Types.Str "_"))
                                                                                                   klIf kl_if_2 (do !appl_3 <- kl_V1391 `pseq` tlstr kl_V1391
                                                                                                                    appl_3 `pseq` kl_shen_shP appl_3) (do return (Atom (B False)))) (do return (List [])))

kl_shen_doubleunderlineP :: Types.KLValue ->
                            Types.KLContext Types.Env Types.KLValue
kl_shen_doubleunderlineP (!kl_V1392) = do !kl_if_0 <- kl_V1392 `pseq` kl_symbolP kl_V1392
                                          klIf kl_if_0 (do !appl_1 <- kl_V1392 `pseq` str kl_V1392
                                                           appl_1 `pseq` kl_shen_dhP appl_1) (do return (Atom (B False)))

kl_shen_dhP :: Types.KLValue ->
               Types.KLContext Types.Env Types.KLValue
kl_shen_dhP (!kl_V1393) = do !kl_if_0 <- kl_V1393 `pseq` eq (Types.Atom (Types.Str "=")) kl_V1393
                             klIf kl_if_0 (do return (Atom (B True))) (do klIf (Atom (B True)) (do !appl_1 <- kl_V1393 `pseq` pos kl_V1393 (Types.Atom (Types.N (Types.KI 0)))
                                                                                                   !kl_if_2 <- appl_1 `pseq` eq appl_1 (Types.Atom (Types.Str "="))
                                                                                                   klIf kl_if_2 (do !appl_3 <- kl_V1393 `pseq` tlstr kl_V1393
                                                                                                                    appl_3 `pseq` kl_shen_dhP appl_3) (do return (Atom (B False)))) (do return (List [])))

kl_shen_process_datatype :: Types.KLValue ->
                            Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_process_datatype (!kl_V1394) (!kl_V1395) = do !appl_0 <- kl_V1394 `pseq` (kl_V1395 `pseq` kl_shen_rules_RBhorn_clauses kl_V1394 kl_V1395)
                                                      let !aw_1 = Types.Atom (Types.UnboundSym "shen.s-prolog")
                                                      !appl_2 <- appl_0 `pseq` applyWrapper aw_1 [appl_0]
                                                      appl_2 `pseq` kl_shen_remember_datatype appl_2

kl_shen_remember_datatype :: Types.KLValue ->
                             Types.KLContext Types.Env Types.KLValue
kl_shen_remember_datatype (!kl_V1400) = do !kl_if_0 <- kl_V1400 `pseq` consP kl_V1400
                                           klIf kl_if_0 (do !appl_1 <- kl_V1400 `pseq` hd kl_V1400
                                                            !appl_2 <- value (Types.Atom (Types.UnboundSym "shen.*datatypes*"))
                                                            let !aw_3 = Types.Atom (Types.UnboundSym "adjoin")
                                                            !appl_4 <- appl_1 `pseq` (appl_2 `pseq` applyWrapper aw_3 [appl_1,
                                                                                                                       appl_2])
                                                            !appl_5 <- appl_4 `pseq` klSet (Types.Atom (Types.UnboundSym "shen.*datatypes*")) appl_4
                                                            !appl_6 <- kl_V1400 `pseq` hd kl_V1400
                                                            !appl_7 <- value (Types.Atom (Types.UnboundSym "shen.*alldatatypes*"))
                                                            let !aw_8 = Types.Atom (Types.UnboundSym "adjoin")
                                                            !appl_9 <- appl_6 `pseq` (appl_7 `pseq` applyWrapper aw_8 [appl_6,
                                                                                                                       appl_7])
                                                            !appl_10 <- appl_9 `pseq` klSet (Types.Atom (Types.UnboundSym "shen.*alldatatypes*")) appl_9
                                                            !appl_11 <- kl_V1400 `pseq` hd kl_V1400
                                                            !appl_12 <- appl_10 `pseq` (appl_11 `pseq` kl_do appl_10 appl_11)
                                                            appl_5 `pseq` (appl_12 `pseq` kl_do appl_5 appl_12)) (do klIf (Atom (B True)) (do let !aw_13 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                              applyWrapper aw_13 [ApplC (wrapNamed "shen.remember-datatype" kl_shen_remember_datatype)]) (do return (List [])))

kl_shen_rules_RBhorn_clauses :: Types.KLValue ->
                                Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_rules_RBhorn_clauses (!kl_V1403) (!kl_V1404) = do let !appl_0 = List []
                                                          !kl_if_1 <- appl_0 `pseq` (kl_V1404 `pseq` eq appl_0 kl_V1404)
                                                          klIf kl_if_1 (do return (List [])) (do !kl_if_2 <- kl_V1404 `pseq` consP kl_V1404
                                                                                                 !kl_if_3 <- klIf kl_if_2 (do !appl_4 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                              !kl_if_5 <- appl_4 `pseq` kl_tupleP appl_4
                                                                                                                              klIf kl_if_5 (do !appl_6 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                                               !appl_7 <- appl_6 `pseq` kl_fst appl_6
                                                                                                                                               appl_7 `pseq` eq (Types.Atom (Types.UnboundSym "shen.single")) appl_7) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                                                 klIf kl_if_3 (do !appl_8 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                  !appl_9 <- appl_8 `pseq` kl_snd appl_8
                                                                                                                  !appl_10 <- kl_V1403 `pseq` (appl_9 `pseq` kl_shen_rule_RBhorn_clause kl_V1403 appl_9)
                                                                                                                  !appl_11 <- kl_V1404 `pseq` tl kl_V1404
                                                                                                                  !appl_12 <- kl_V1403 `pseq` (appl_11 `pseq` kl_shen_rules_RBhorn_clauses kl_V1403 appl_11)
                                                                                                                  appl_10 `pseq` (appl_12 `pseq` klCons appl_10 appl_12)) (do !kl_if_13 <- kl_V1404 `pseq` consP kl_V1404
                                                                                                                                                                              !kl_if_14 <- klIf kl_if_13 (do !appl_15 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                                                                                                             !kl_if_16 <- appl_15 `pseq` kl_tupleP appl_15
                                                                                                                                                                                                             klIf kl_if_16 (do !appl_17 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                                                                                                                               !appl_18 <- appl_17 `pseq` kl_fst appl_17
                                                                                                                                                                                                                               appl_18 `pseq` eq (Types.Atom (Types.UnboundSym "shen.double")) appl_18) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                                                                                                                              klIf kl_if_14 (do !appl_19 <- kl_V1404 `pseq` hd kl_V1404
                                                                                                                                                                                                !appl_20 <- appl_19 `pseq` kl_snd appl_19
                                                                                                                                                                                                !appl_21 <- appl_20 `pseq` kl_shen_double_RBsingles appl_20
                                                                                                                                                                                                !appl_22 <- kl_V1404 `pseq` tl kl_V1404
                                                                                                                                                                                                !appl_23 <- appl_21 `pseq` (appl_22 `pseq` kl_append appl_21 appl_22)
                                                                                                                                                                                                kl_V1403 `pseq` (appl_23 `pseq` kl_shen_rules_RBhorn_clauses kl_V1403 appl_23)) (do klIf (Atom (B True)) (do let !aw_24 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                                                                             applyWrapper aw_24 [ApplC (wrapNamed "shen.rules->horn-clauses" kl_shen_rules_RBhorn_clauses)]) (do return (List [])))))

kl_shen_double_RBsingles :: Types.KLValue ->
                            Types.KLContext Types.Env Types.KLValue
kl_shen_double_RBsingles (!kl_V1405) = do !appl_0 <- kl_V1405 `pseq` kl_shen_right_rule kl_V1405
                                          !appl_1 <- kl_V1405 `pseq` kl_shen_left_rule kl_V1405
                                          let !appl_2 = List []
                                          !appl_3 <- appl_1 `pseq` (appl_2 `pseq` klCons appl_1 appl_2)
                                          appl_0 `pseq` (appl_3 `pseq` klCons appl_0 appl_3)

kl_shen_right_rule :: Types.KLValue ->
                      Types.KLContext Types.Env Types.KLValue
kl_shen_right_rule (!kl_V1406) = do kl_V1406 `pseq` kl_Atp (Types.Atom (Types.UnboundSym "shen.single")) kl_V1406

kl_shen_left_rule :: Types.KLValue ->
                     Types.KLContext Types.Env Types.KLValue
kl_shen_left_rule (!kl_V1407) = do !kl_if_0 <- kl_V1407 `pseq` consP kl_V1407
                                   !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1407 `pseq` tl kl_V1407
                                                                !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                                klIf kl_if_3 (do !appl_4 <- kl_V1407 `pseq` tl kl_V1407
                                                                                 !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                 !kl_if_6 <- appl_5 `pseq` consP appl_5
                                                                                 klIf kl_if_6 (do !appl_7 <- kl_V1407 `pseq` tl kl_V1407
                                                                                                  !appl_8 <- appl_7 `pseq` tl appl_7
                                                                                                  !appl_9 <- appl_8 `pseq` hd appl_8
                                                                                                  !kl_if_10 <- appl_9 `pseq` kl_tupleP appl_9
                                                                                                  klIf kl_if_10 (do let !appl_11 = List []
                                                                                                                    !appl_12 <- kl_V1407 `pseq` tl kl_V1407
                                                                                                                    !appl_13 <- appl_12 `pseq` tl appl_12
                                                                                                                    !appl_14 <- appl_13 `pseq` hd appl_13
                                                                                                                    !appl_15 <- appl_14 `pseq` kl_fst appl_14
                                                                                                                    !kl_if_16 <- appl_11 `pseq` (appl_15 `pseq` eq appl_11 appl_15)
                                                                                                                    klIf kl_if_16 (do let !appl_17 = List []
                                                                                                                                      !appl_18 <- kl_V1407 `pseq` tl kl_V1407
                                                                                                                                      !appl_19 <- appl_18 `pseq` tl appl_18
                                                                                                                                      !appl_20 <- appl_19 `pseq` tl appl_19
                                                                                                                                      appl_17 `pseq` (appl_20 `pseq` eq appl_17 appl_20)) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                   klIf kl_if_1 (do let !appl_21 = ApplC (Func "lambda" (Context (\(!kl_Q) -> do let !appl_22 = ApplC (Func "lambda" (Context (\(!kl_NewConclusion) -> do let !appl_23 = ApplC (Func "lambda" (Context (\(!kl_NewPremises) -> do !appl_24 <- kl_V1407 `pseq` hd kl_V1407
                                                                                                                                                                                                                                                                 let !appl_25 = List []
                                                                                                                                                                                                                                                                 !appl_26 <- kl_NewConclusion `pseq` (appl_25 `pseq` klCons kl_NewConclusion appl_25)
                                                                                                                                                                                                                                                                 !appl_27 <- kl_NewPremises `pseq` (appl_26 `pseq` klCons kl_NewPremises appl_26)
                                                                                                                                                                                                                                                                 !appl_28 <- appl_24 `pseq` (appl_27 `pseq` klCons appl_24 appl_27)
                                                                                                                                                                                                                                                                 appl_28 `pseq` kl_Atp (Types.Atom (Types.UnboundSym "shen.single")) appl_28)))
                                                                                                                                                                                          let !appl_29 = ApplC (Func "lambda" (Context (\(!kl_V1359) -> do kl_V1359 `pseq` kl_shen_right_RBleft kl_V1359)))
                                                                                                                                                                                          !appl_30 <- kl_V1407 `pseq` tl kl_V1407
                                                                                                                                                                                          !appl_31 <- appl_30 `pseq` hd appl_30
                                                                                                                                                                                          !appl_32 <- appl_29 `pseq` (appl_31 `pseq` kl_map appl_29 appl_31)
                                                                                                                                                                                          !appl_33 <- appl_32 `pseq` (kl_Q `pseq` kl_Atp appl_32 kl_Q)
                                                                                                                                                                                          let !appl_34 = List []
                                                                                                                                                                                          !appl_35 <- appl_33 `pseq` (appl_34 `pseq` klCons appl_33 appl_34)
                                                                                                                                                                                          appl_35 `pseq` applyWrapper appl_23 [appl_35])))
                                                                                                                 !appl_36 <- kl_V1407 `pseq` tl kl_V1407
                                                                                                                 !appl_37 <- appl_36 `pseq` tl appl_36
                                                                                                                 !appl_38 <- appl_37 `pseq` hd appl_37
                                                                                                                 !appl_39 <- appl_38 `pseq` kl_snd appl_38
                                                                                                                 let !appl_40 = List []
                                                                                                                 !appl_41 <- appl_39 `pseq` (appl_40 `pseq` klCons appl_39 appl_40)
                                                                                                                 !appl_42 <- appl_41 `pseq` (kl_Q `pseq` kl_Atp appl_41 kl_Q)
                                                                                                                 appl_42 `pseq` applyWrapper appl_22 [appl_42])))
                                                    !appl_43 <- kl_gensym (Types.Atom (Types.UnboundSym "Qv"))
                                                    appl_43 `pseq` applyWrapper appl_21 [appl_43]) (do klIf (Atom (B True)) (do let !aw_44 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                applyWrapper aw_44 [ApplC (wrapNamed "shen.left-rule" kl_shen_left_rule)]) (do return (List [])))

kl_shen_right_RBleft :: Types.KLValue ->
                        Types.KLContext Types.Env Types.KLValue
kl_shen_right_RBleft (!kl_V1412) = do !kl_if_0 <- kl_V1412 `pseq` kl_tupleP kl_V1412
                                      !kl_if_1 <- klIf kl_if_0 (do let !appl_2 = List []
                                                                   !appl_3 <- kl_V1412 `pseq` kl_fst kl_V1412
                                                                   appl_2 `pseq` (appl_3 `pseq` eq appl_2 appl_3)) (do return (Atom (B False)))
                                      klIf kl_if_1 (do kl_V1412 `pseq` kl_snd kl_V1412) (do klIf (Atom (B True)) (do simpleError (Types.Atom (Types.Str "syntax error with ==========\n"))) (do return (List [])))

kl_shen_rule_RBhorn_clause :: Types.KLValue ->
                              Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_rule_RBhorn_clause (!kl_V1413) (!kl_V1414) = do !kl_if_0 <- kl_V1414 `pseq` consP kl_V1414
                                                        !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1414 `pseq` tl kl_V1414
                                                                                     !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                                                     klIf kl_if_3 (do !appl_4 <- kl_V1414 `pseq` tl kl_V1414
                                                                                                      !appl_5 <- appl_4 `pseq` tl appl_4
                                                                                                      !kl_if_6 <- appl_5 `pseq` consP appl_5
                                                                                                      klIf kl_if_6 (do !appl_7 <- kl_V1414 `pseq` tl kl_V1414
                                                                                                                       !appl_8 <- appl_7 `pseq` tl appl_7
                                                                                                                       !appl_9 <- appl_8 `pseq` hd appl_8
                                                                                                                       !kl_if_10 <- appl_9 `pseq` kl_tupleP appl_9
                                                                                                                       klIf kl_if_10 (do let !appl_11 = List []
                                                                                                                                         !appl_12 <- kl_V1414 `pseq` tl kl_V1414
                                                                                                                                         !appl_13 <- appl_12 `pseq` tl appl_12
                                                                                                                                         !appl_14 <- appl_13 `pseq` tl appl_13
                                                                                                                                         appl_11 `pseq` (appl_14 `pseq` eq appl_11 appl_14)) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                        klIf kl_if_1 (do !appl_15 <- kl_V1414 `pseq` tl kl_V1414
                                                                         !appl_16 <- appl_15 `pseq` tl appl_15
                                                                         !appl_17 <- appl_16 `pseq` hd appl_16
                                                                         !appl_18 <- appl_17 `pseq` kl_snd appl_17
                                                                         !appl_19 <- kl_V1413 `pseq` (appl_18 `pseq` kl_shen_rule_RBhorn_clause_head kl_V1413 appl_18)
                                                                         !appl_20 <- kl_V1414 `pseq` hd kl_V1414
                                                                         !appl_21 <- kl_V1414 `pseq` tl kl_V1414
                                                                         !appl_22 <- appl_21 `pseq` hd appl_21
                                                                         !appl_23 <- kl_V1414 `pseq` tl kl_V1414
                                                                         !appl_24 <- appl_23 `pseq` tl appl_23
                                                                         !appl_25 <- appl_24 `pseq` hd appl_24
                                                                         !appl_26 <- appl_25 `pseq` kl_fst appl_25
                                                                         !appl_27 <- appl_20 `pseq` (appl_22 `pseq` (appl_26 `pseq` kl_shen_rule_RBhorn_clause_body appl_20 appl_22 appl_26))
                                                                         let !appl_28 = List []
                                                                         !appl_29 <- appl_27 `pseq` (appl_28 `pseq` klCons appl_27 appl_28)
                                                                         !appl_30 <- appl_29 `pseq` klCons (Types.Atom (Types.UnboundSym ":-")) appl_29
                                                                         appl_19 `pseq` (appl_30 `pseq` klCons appl_19 appl_30)) (do klIf (Atom (B True)) (do let !aw_31 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                              applyWrapper aw_31 [ApplC (wrapNamed "shen.rule->horn-clause" kl_shen_rule_RBhorn_clause)]) (do return (List [])))

kl_shen_rule_RBhorn_clause_head :: Types.KLValue ->
                                   Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_rule_RBhorn_clause_head (!kl_V1415) (!kl_V1416) = do !appl_0 <- kl_V1416 `pseq` kl_shen_mode_ify kl_V1416
                                                             let !appl_1 = List []
                                                             !appl_2 <- appl_1 `pseq` klCons (Types.Atom (Types.UnboundSym "Context_1957")) appl_1
                                                             !appl_3 <- appl_0 `pseq` (appl_2 `pseq` klCons appl_0 appl_2)
                                                             kl_V1415 `pseq` (appl_3 `pseq` klCons kl_V1415 appl_3)

kl_shen_mode_ify :: Types.KLValue ->
                    Types.KLContext Types.Env Types.KLValue
kl_shen_mode_ify (!kl_V1417) = do !kl_if_0 <- kl_V1417 `pseq` consP kl_V1417
                                  !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1417 `pseq` tl kl_V1417
                                                               !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                               klIf kl_if_3 (do !appl_4 <- kl_V1417 `pseq` tl kl_V1417
                                                                                !appl_5 <- appl_4 `pseq` hd appl_4
                                                                                !kl_if_6 <- appl_5 `pseq` eq (Types.Atom (Types.UnboundSym ":")) appl_5
                                                                                klIf kl_if_6 (do !appl_7 <- kl_V1417 `pseq` tl kl_V1417
                                                                                                 !appl_8 <- appl_7 `pseq` tl appl_7
                                                                                                 !kl_if_9 <- appl_8 `pseq` consP appl_8
                                                                                                 klIf kl_if_9 (do let !appl_10 = List []
                                                                                                                  !appl_11 <- kl_V1417 `pseq` tl kl_V1417
                                                                                                                  !appl_12 <- appl_11 `pseq` tl appl_11
                                                                                                                  !appl_13 <- appl_12 `pseq` tl appl_12
                                                                                                                  appl_10 `pseq` (appl_13 `pseq` eq appl_10 appl_13)) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                  klIf kl_if_1 (do !appl_14 <- kl_V1417 `pseq` hd kl_V1417
                                                   !appl_15 <- kl_V1417 `pseq` tl kl_V1417
                                                   !appl_16 <- appl_15 `pseq` tl appl_15
                                                   !appl_17 <- appl_16 `pseq` hd appl_16
                                                   let !appl_18 = List []
                                                   !appl_19 <- appl_18 `pseq` klCons (ApplC (wrapNamed "+" add)) appl_18
                                                   !appl_20 <- appl_17 `pseq` (appl_19 `pseq` klCons appl_17 appl_19)
                                                   !appl_21 <- appl_20 `pseq` klCons (Types.Atom (Types.UnboundSym "mode")) appl_20
                                                   let !appl_22 = List []
                                                   !appl_23 <- appl_21 `pseq` (appl_22 `pseq` klCons appl_21 appl_22)
                                                   !appl_24 <- appl_23 `pseq` klCons (Types.Atom (Types.UnboundSym ":")) appl_23
                                                   !appl_25 <- appl_14 `pseq` (appl_24 `pseq` klCons appl_14 appl_24)
                                                   let !appl_26 = List []
                                                   !appl_27 <- appl_26 `pseq` klCons (ApplC (wrapNamed "-" Primitives.subtract)) appl_26
                                                   !appl_28 <- appl_25 `pseq` (appl_27 `pseq` klCons appl_25 appl_27)
                                                   appl_28 `pseq` klCons (Types.Atom (Types.UnboundSym "mode")) appl_28) (do klIf (Atom (B True)) (do return kl_V1417) (do return (List [])))

kl_shen_rule_RBhorn_clause_body :: Types.KLValue ->
                                   Types.KLValue ->
                                   Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_rule_RBhorn_clause_body (!kl_V1418) (!kl_V1419) (!kl_V1420) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_Variables) -> do let !appl_1 = ApplC (Func "lambda" (Context (\(!kl_Predicates) -> do let !appl_2 = ApplC (Func "lambda" (Context (\(!kl_SearchLiterals) -> do let !appl_3 = ApplC (Func "lambda" (Context (\(!kl_SearchClauses) -> do let !appl_4 = ApplC (Func "lambda" (Context (\(!kl_SideLiterals) -> do let !appl_5 = ApplC (Func "lambda" (Context (\(!kl_PremissLiterals) -> do !appl_6 <- kl_SideLiterals `pseq` (kl_PremissLiterals `pseq` kl_append kl_SideLiterals kl_PremissLiterals)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    kl_SearchLiterals `pseq` (appl_6 `pseq` kl_append kl_SearchLiterals appl_6))))
                                                                                                                                                                                                                                                                                                                                                                                                                                          let !appl_7 = ApplC (Func "lambda" (Context (\(!kl_X) -> do !appl_8 <- kl_V1420 `pseq` kl_emptyP kl_V1420
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      kl_X `pseq` (appl_8 `pseq` kl_shen_construct_premiss_literal kl_X appl_8))))
                                                                                                                                                                                                                                                                                                                                                                                                                                          !appl_9 <- appl_7 `pseq` (kl_V1419 `pseq` kl_map appl_7 kl_V1419)
                                                                                                                                                                                                                                                                                                                                                                                                                                          appl_9 `pseq` applyWrapper appl_5 [appl_9])))
                                                                                                                                                                                                                                                                                                                                                                   !appl_10 <- kl_V1418 `pseq` kl_shen_construct_side_literals kl_V1418
                                                                                                                                                                                                                                                                                                                                                                   appl_10 `pseq` applyWrapper appl_4 [appl_10])))
                                                                                                                                                                                                                                                                                           !appl_11 <- kl_Predicates `pseq` (kl_V1420 `pseq` (kl_Variables `pseq` kl_shen_construct_search_clauses kl_Predicates kl_V1420 kl_Variables))
                                                                                                                                                                                                                                                                                           appl_11 `pseq` applyWrapper appl_3 [appl_11])))
                                                                                                                                                                                                                  !appl_12 <- kl_Predicates `pseq` (kl_Variables `pseq` kl_shen_construct_search_literals kl_Predicates kl_Variables (Types.Atom (Types.UnboundSym "Context_1957")) (Types.Atom (Types.UnboundSym "Context1_1957")))
                                                                                                                                                                                                                  appl_12 `pseq` applyWrapper appl_2 [appl_12])))
                                                                                                                                             let !appl_13 = ApplC (Func "lambda" (Context (\(!kl_X) -> do kl_gensym (Types.Atom (Types.UnboundSym "shen.cl")))))
                                                                                                                                             !appl_14 <- appl_13 `pseq` (kl_V1420 `pseq` kl_map appl_13 kl_V1420)
                                                                                                                                             appl_14 `pseq` applyWrapper appl_1 [appl_14])))
                                                                         let !appl_15 = ApplC (Func "lambda" (Context (\(!kl_V1360) -> do kl_V1360 `pseq` kl_shen_extract_vars kl_V1360)))
                                                                         !appl_16 <- appl_15 `pseq` (kl_V1420 `pseq` kl_map appl_15 kl_V1420)
                                                                         appl_16 `pseq` applyWrapper appl_0 [appl_16]

kl_shen_construct_search_literals :: Types.KLValue ->
                                     Types.KLValue ->
                                     Types.KLValue ->
                                     Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_search_literals (!kl_V1425) (!kl_V1426) (!kl_V1427) (!kl_V1428) = do let !appl_0 = List []
                                                                                       !kl_if_1 <- appl_0 `pseq` (kl_V1425 `pseq` eq appl_0 kl_V1425)
                                                                                       !kl_if_2 <- klIf kl_if_1 (do let !appl_3 = List []
                                                                                                                    appl_3 `pseq` (kl_V1426 `pseq` eq appl_3 kl_V1426)) (do return (Atom (B False)))
                                                                                       klIf kl_if_2 (do return (List [])) (do klIf (Atom (B True)) (do kl_V1425 `pseq` (kl_V1426 `pseq` (kl_V1427 `pseq` (kl_V1428 `pseq` kl_shen_csl_help kl_V1425 kl_V1426 kl_V1427 kl_V1428)))) (do return (List [])))

kl_shen_csl_help :: Types.KLValue ->
                    Types.KLValue ->
                    Types.KLValue ->
                    Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_csl_help (!kl_V1431) (!kl_V1432) (!kl_V1433) (!kl_V1434) = do let !appl_0 = List []
                                                                      !kl_if_1 <- appl_0 `pseq` (kl_V1431 `pseq` eq appl_0 kl_V1431)
                                                                      !kl_if_2 <- klIf kl_if_1 (do let !appl_3 = List []
                                                                                                   appl_3 `pseq` (kl_V1432 `pseq` eq appl_3 kl_V1432)) (do return (Atom (B False)))
                                                                      klIf kl_if_2 (do let !appl_4 = List []
                                                                                       !appl_5 <- kl_V1433 `pseq` (appl_4 `pseq` klCons kl_V1433 appl_4)
                                                                                       !appl_6 <- appl_5 `pseq` klCons (Types.Atom (Types.UnboundSym "ContextOut_1957")) appl_5
                                                                                       !appl_7 <- appl_6 `pseq` klCons (Types.Atom (Types.UnboundSym "bind")) appl_6
                                                                                       let !appl_8 = List []
                                                                                       appl_7 `pseq` (appl_8 `pseq` klCons appl_7 appl_8)) (do !kl_if_9 <- kl_V1431 `pseq` consP kl_V1431
                                                                                                                                               !kl_if_10 <- klIf kl_if_9 (do kl_V1432 `pseq` consP kl_V1432) (do return (Atom (B False)))
                                                                                                                                               klIf kl_if_10 (do !appl_11 <- kl_V1431 `pseq` hd kl_V1431
                                                                                                                                                                 !appl_12 <- kl_V1432 `pseq` hd kl_V1432
                                                                                                                                                                 !appl_13 <- kl_V1434 `pseq` (appl_12 `pseq` klCons kl_V1434 appl_12)
                                                                                                                                                                 !appl_14 <- kl_V1433 `pseq` (appl_13 `pseq` klCons kl_V1433 appl_13)
                                                                                                                                                                 !appl_15 <- appl_11 `pseq` (appl_14 `pseq` klCons appl_11 appl_14)
                                                                                                                                                                 !appl_16 <- kl_V1431 `pseq` tl kl_V1431
                                                                                                                                                                 !appl_17 <- kl_V1432 `pseq` tl kl_V1432
                                                                                                                                                                 !appl_18 <- kl_gensym (Types.Atom (Types.UnboundSym "Context"))
                                                                                                                                                                 !appl_19 <- appl_16 `pseq` (appl_17 `pseq` (kl_V1434 `pseq` (appl_18 `pseq` kl_shen_csl_help appl_16 appl_17 kl_V1434 appl_18)))
                                                                                                                                                                 appl_15 `pseq` (appl_19 `pseq` klCons appl_15 appl_19)) (do klIf (Atom (B True)) (do let !aw_20 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                      applyWrapper aw_20 [ApplC (wrapNamed "shen.csl-help" kl_shen_csl_help)]) (do return (List []))))

kl_shen_construct_search_clauses :: Types.KLValue ->
                                    Types.KLValue ->
                                    Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_search_clauses (!kl_V1435) (!kl_V1436) (!kl_V1437) = do let !appl_0 = List []
                                                                          !kl_if_1 <- appl_0 `pseq` (kl_V1435 `pseq` eq appl_0 kl_V1435)
                                                                          !kl_if_2 <- klIf kl_if_1 (do let !appl_3 = List []
                                                                                                       !kl_if_4 <- appl_3 `pseq` (kl_V1436 `pseq` eq appl_3 kl_V1436)
                                                                                                       klIf kl_if_4 (do let !appl_5 = List []
                                                                                                                        appl_5 `pseq` (kl_V1437 `pseq` eq appl_5 kl_V1437)) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                          klIf kl_if_2 (do return (Types.Atom (Types.UnboundSym "shen.skip"))) (do !kl_if_6 <- kl_V1435 `pseq` consP kl_V1435
                                                                                                                                                   !kl_if_7 <- klIf kl_if_6 (do !kl_if_8 <- kl_V1436 `pseq` consP kl_V1436
                                                                                                                                                                                klIf kl_if_8 (do kl_V1437 `pseq` consP kl_V1437) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                                                                                                   klIf kl_if_7 (do !appl_9 <- kl_V1435 `pseq` hd kl_V1435
                                                                                                                                                                    !appl_10 <- kl_V1436 `pseq` hd kl_V1436
                                                                                                                                                                    !appl_11 <- kl_V1437 `pseq` hd kl_V1437
                                                                                                                                                                    !appl_12 <- appl_9 `pseq` (appl_10 `pseq` (appl_11 `pseq` kl_shen_construct_search_clause appl_9 appl_10 appl_11))
                                                                                                                                                                    !appl_13 <- kl_V1435 `pseq` tl kl_V1435
                                                                                                                                                                    !appl_14 <- kl_V1436 `pseq` tl kl_V1436
                                                                                                                                                                    !appl_15 <- kl_V1437 `pseq` tl kl_V1437
                                                                                                                                                                    !appl_16 <- appl_13 `pseq` (appl_14 `pseq` (appl_15 `pseq` kl_shen_construct_search_clauses appl_13 appl_14 appl_15))
                                                                                                                                                                    appl_12 `pseq` (appl_16 `pseq` kl_do appl_12 appl_16)) (do klIf (Atom (B True)) (do let !aw_17 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                        applyWrapper aw_17 [ApplC (wrapNamed "shen.construct-search-clauses" kl_shen_construct_search_clauses)]) (do return (List []))))

kl_shen_construct_search_clause :: Types.KLValue ->
                                   Types.KLValue ->
                                   Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_search_clause (!kl_V1438) (!kl_V1439) (!kl_V1440) = do !appl_0 <- kl_V1438 `pseq` (kl_V1439 `pseq` (kl_V1440 `pseq` kl_shen_construct_base_search_clause kl_V1438 kl_V1439 kl_V1440))
                                                                         !appl_1 <- kl_V1438 `pseq` (kl_V1439 `pseq` (kl_V1440 `pseq` kl_shen_construct_recursive_search_clause kl_V1438 kl_V1439 kl_V1440))
                                                                         let !appl_2 = List []
                                                                         !appl_3 <- appl_1 `pseq` (appl_2 `pseq` klCons appl_1 appl_2)
                                                                         !appl_4 <- appl_0 `pseq` (appl_3 `pseq` klCons appl_0 appl_3)
                                                                         let !aw_5 = Types.Atom (Types.UnboundSym "shen.s-prolog")
                                                                         appl_4 `pseq` applyWrapper aw_5 [appl_4]

kl_shen_construct_base_search_clause :: Types.KLValue ->
                                        Types.KLValue ->
                                        Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_base_search_clause (!kl_V1441) (!kl_V1442) (!kl_V1443) = do !appl_0 <- kl_V1442 `pseq` kl_shen_mode_ify kl_V1442
                                                                              !appl_1 <- appl_0 `pseq` klCons appl_0 (Types.Atom (Types.UnboundSym "In_1957"))
                                                                              !appl_2 <- kl_V1443 `pseq` klCons (Types.Atom (Types.UnboundSym "In_1957")) kl_V1443
                                                                              !appl_3 <- appl_1 `pseq` (appl_2 `pseq` klCons appl_1 appl_2)
                                                                              !appl_4 <- kl_V1441 `pseq` (appl_3 `pseq` klCons kl_V1441 appl_3)
                                                                              let !appl_5 = List []
                                                                              let !appl_6 = List []
                                                                              !appl_7 <- appl_5 `pseq` (appl_6 `pseq` klCons appl_5 appl_6)
                                                                              !appl_8 <- appl_7 `pseq` klCons (Types.Atom (Types.UnboundSym ":-")) appl_7
                                                                              appl_4 `pseq` (appl_8 `pseq` klCons appl_4 appl_8)

kl_shen_construct_recursive_search_clause :: Types.KLValue ->
                                             Types.KLValue ->
                                             Types.KLValue ->
                                             Types.KLContext Types.Env Types.KLValue
kl_shen_construct_recursive_search_clause (!kl_V1444) (!kl_V1445) (!kl_V1446) = do !appl_0 <- klCons (Types.Atom (Types.UnboundSym "Assumption_1957")) (Types.Atom (Types.UnboundSym "Assumptions_1957"))
                                                                                   !appl_1 <- klCons (Types.Atom (Types.UnboundSym "Assumption_1957")) (Types.Atom (Types.UnboundSym "Out_1957"))
                                                                                   !appl_2 <- appl_1 `pseq` (kl_V1446 `pseq` klCons appl_1 kl_V1446)
                                                                                   !appl_3 <- appl_0 `pseq` (appl_2 `pseq` klCons appl_0 appl_2)
                                                                                   !appl_4 <- kl_V1444 `pseq` (appl_3 `pseq` klCons kl_V1444 appl_3)
                                                                                   !appl_5 <- kl_V1446 `pseq` klCons (Types.Atom (Types.UnboundSym "Out_1957")) kl_V1446
                                                                                   !appl_6 <- appl_5 `pseq` klCons (Types.Atom (Types.UnboundSym "Assumptions_1957")) appl_5
                                                                                   !appl_7 <- kl_V1444 `pseq` (appl_6 `pseq` klCons kl_V1444 appl_6)
                                                                                   let !appl_8 = List []
                                                                                   !appl_9 <- appl_7 `pseq` (appl_8 `pseq` klCons appl_7 appl_8)
                                                                                   let !appl_10 = List []
                                                                                   !appl_11 <- appl_9 `pseq` (appl_10 `pseq` klCons appl_9 appl_10)
                                                                                   !appl_12 <- appl_11 `pseq` klCons (Types.Atom (Types.UnboundSym ":-")) appl_11
                                                                                   appl_4 `pseq` (appl_12 `pseq` klCons appl_4 appl_12)

kl_shen_construct_side_literals :: Types.KLValue ->
                                   Types.KLContext Types.Env Types.KLValue
kl_shen_construct_side_literals (!kl_V1451) = do let !appl_0 = List []
                                                 !kl_if_1 <- appl_0 `pseq` (kl_V1451 `pseq` eq appl_0 kl_V1451)
                                                 klIf kl_if_1 (do return (List [])) (do !kl_if_2 <- kl_V1451 `pseq` consP kl_V1451
                                                                                        !kl_if_3 <- klIf kl_if_2 (do !appl_4 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                     !kl_if_5 <- appl_4 `pseq` consP appl_4
                                                                                                                     klIf kl_if_5 (do !appl_6 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                      !appl_7 <- appl_6 `pseq` hd appl_6
                                                                                                                                      !kl_if_8 <- appl_7 `pseq` eq (Types.Atom (Types.UnboundSym "if")) appl_7
                                                                                                                                      klIf kl_if_8 (do !appl_9 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                       !appl_10 <- appl_9 `pseq` tl appl_9
                                                                                                                                                       !kl_if_11 <- appl_10 `pseq` consP appl_10
                                                                                                                                                       klIf kl_if_11 (do let !appl_12 = List []
                                                                                                                                                                         !appl_13 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                         !appl_14 <- appl_13 `pseq` tl appl_13
                                                                                                                                                                         !appl_15 <- appl_14 `pseq` tl appl_14
                                                                                                                                                                         appl_12 `pseq` (appl_15 `pseq` eq appl_12 appl_15)) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                                        klIf kl_if_3 (do !appl_16 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                         !appl_17 <- appl_16 `pseq` tl appl_16
                                                                                                         !appl_18 <- appl_17 `pseq` klCons (Types.Atom (Types.UnboundSym "when")) appl_17
                                                                                                         !appl_19 <- kl_V1451 `pseq` tl kl_V1451
                                                                                                         !appl_20 <- appl_19 `pseq` kl_shen_construct_side_literals appl_19
                                                                                                         appl_18 `pseq` (appl_20 `pseq` klCons appl_18 appl_20)) (do !kl_if_21 <- kl_V1451 `pseq` consP kl_V1451
                                                                                                                                                                     !kl_if_22 <- klIf kl_if_21 (do !appl_23 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                                    !kl_if_24 <- appl_23 `pseq` consP appl_23
                                                                                                                                                                                                    klIf kl_if_24 (do !appl_25 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                                                      !appl_26 <- appl_25 `pseq` hd appl_25
                                                                                                                                                                                                                      !kl_if_27 <- appl_26 `pseq` eq (Types.Atom (Types.UnboundSym "let")) appl_26
                                                                                                                                                                                                                      klIf kl_if_27 (do !appl_28 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                                                                        !appl_29 <- appl_28 `pseq` tl appl_28
                                                                                                                                                                                                                                        !kl_if_30 <- appl_29 `pseq` consP appl_29
                                                                                                                                                                                                                                        klIf kl_if_30 (do !appl_31 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                                                                                          !appl_32 <- appl_31 `pseq` tl appl_31
                                                                                                                                                                                                                                                          !appl_33 <- appl_32 `pseq` tl appl_32
                                                                                                                                                                                                                                                          !kl_if_34 <- appl_33 `pseq` consP appl_33
                                                                                                                                                                                                                                                          klIf kl_if_34 (do let !appl_35 = List []
                                                                                                                                                                                                                                                                            !appl_36 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                                                                                                            !appl_37 <- appl_36 `pseq` tl appl_36
                                                                                                                                                                                                                                                                            !appl_38 <- appl_37 `pseq` tl appl_37
                                                                                                                                                                                                                                                                            !appl_39 <- appl_38 `pseq` tl appl_38
                                                                                                                                                                                                                                                                            appl_35 `pseq` (appl_39 `pseq` eq appl_35 appl_39)) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))) (do return (Atom (B False)))
                                                                                                                                                                     klIf kl_if_22 (do !appl_40 <- kl_V1451 `pseq` hd kl_V1451
                                                                                                                                                                                       !appl_41 <- appl_40 `pseq` tl appl_40
                                                                                                                                                                                       !appl_42 <- appl_41 `pseq` klCons (Types.Atom (Types.UnboundSym "is")) appl_41
                                                                                                                                                                                       !appl_43 <- kl_V1451 `pseq` tl kl_V1451
                                                                                                                                                                                       !appl_44 <- appl_43 `pseq` kl_shen_construct_side_literals appl_43
                                                                                                                                                                                       appl_42 `pseq` (appl_44 `pseq` klCons appl_42 appl_44)) (do !kl_if_45 <- kl_V1451 `pseq` consP kl_V1451
                                                                                                                                                                                                                                                   klIf kl_if_45 (do !appl_46 <- kl_V1451 `pseq` tl kl_V1451
                                                                                                                                                                                                                                                                     appl_46 `pseq` kl_shen_construct_side_literals appl_46) (do klIf (Atom (B True)) (do let !aw_47 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                                                                                                                          applyWrapper aw_47 [ApplC (wrapNamed "shen.construct-side-literals" kl_shen_construct_side_literals)]) (do return (List []))))))

kl_shen_construct_premiss_literal :: Types.KLValue ->
                                     Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_premiss_literal (!kl_V1456) (!kl_V1457) = do !kl_if_0 <- kl_V1456 `pseq` kl_tupleP kl_V1456
                                                               klIf kl_if_0 (do !appl_1 <- kl_V1456 `pseq` kl_snd kl_V1456
                                                                                !appl_2 <- appl_1 `pseq` kl_shen_recursive_cons_form appl_1
                                                                                !appl_3 <- kl_V1456 `pseq` kl_fst kl_V1456
                                                                                !appl_4 <- kl_V1457 `pseq` (appl_3 `pseq` kl_shen_construct_context kl_V1457 appl_3)
                                                                                let !appl_5 = List []
                                                                                !appl_6 <- appl_4 `pseq` (appl_5 `pseq` klCons appl_4 appl_5)
                                                                                !appl_7 <- appl_2 `pseq` (appl_6 `pseq` klCons appl_2 appl_6)
                                                                                appl_7 `pseq` klCons (Types.Atom (Types.UnboundSym "shen.t*")) appl_7) (do !kl_if_8 <- kl_V1456 `pseq` eq (Types.Atom (Types.UnboundSym "!")) kl_V1456
                                                                                                                                                           klIf kl_if_8 (do let !appl_9 = List []
                                                                                                                                                                            !appl_10 <- appl_9 `pseq` klCons (Types.Atom (Types.UnboundSym "Throwcontrol")) appl_9
                                                                                                                                                                            appl_10 `pseq` klCons (Types.Atom (Types.UnboundSym "cut")) appl_10) (do klIf (Atom (B True)) (do let !aw_11 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                                              applyWrapper aw_11 [ApplC (wrapNamed "shen.construct-premiss-literal" kl_shen_construct_premiss_literal)]) (do return (List []))))

kl_shen_construct_context :: Types.KLValue ->
                             Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_construct_context (!kl_V1458) (!kl_V1459) = do !kl_if_0 <- kl_V1458 `pseq` eq (Atom (B True)) kl_V1458
                                                       !kl_if_1 <- klIf kl_if_0 (do let !appl_2 = List []
                                                                                    appl_2 `pseq` (kl_V1459 `pseq` eq appl_2 kl_V1459)) (do return (Atom (B False)))
                                                       klIf kl_if_1 (do return (Types.Atom (Types.UnboundSym "Context_1957"))) (do !kl_if_3 <- kl_V1458 `pseq` eq (Atom (B False)) kl_V1458
                                                                                                                                   !kl_if_4 <- klIf kl_if_3 (do let !appl_5 = List []
                                                                                                                                                                appl_5 `pseq` (kl_V1459 `pseq` eq appl_5 kl_V1459)) (do return (Atom (B False)))
                                                                                                                                   klIf kl_if_4 (do return (Types.Atom (Types.UnboundSym "ContextOut_1957"))) (do !kl_if_6 <- kl_V1459 `pseq` consP kl_V1459
                                                                                                                                                                                                                  klIf kl_if_6 (do !appl_7 <- kl_V1459 `pseq` hd kl_V1459
                                                                                                                                                                                                                                   !appl_8 <- appl_7 `pseq` kl_shen_recursive_cons_form appl_7
                                                                                                                                                                                                                                   !appl_9 <- kl_V1459 `pseq` tl kl_V1459
                                                                                                                                                                                                                                   !appl_10 <- kl_V1458 `pseq` (appl_9 `pseq` kl_shen_construct_context kl_V1458 appl_9)
                                                                                                                                                                                                                                   let !appl_11 = List []
                                                                                                                                                                                                                                   !appl_12 <- appl_10 `pseq` (appl_11 `pseq` klCons appl_10 appl_11)
                                                                                                                                                                                                                                   !appl_13 <- appl_8 `pseq` (appl_12 `pseq` klCons appl_8 appl_12)
                                                                                                                                                                                                                                   appl_13 `pseq` klCons (ApplC (wrapNamed "cons" klCons)) appl_13) (do klIf (Atom (B True)) (do let !aw_14 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                                                                                                                                                                                                                 applyWrapper aw_14 [ApplC (wrapNamed "shen.construct-context" kl_shen_construct_context)]) (do return (List [])))))

kl_shen_recursive_cons_form :: Types.KLValue ->
                               Types.KLContext Types.Env Types.KLValue
kl_shen_recursive_cons_form (!kl_V1460) = do !kl_if_0 <- kl_V1460 `pseq` consP kl_V1460
                                             klIf kl_if_0 (do !appl_1 <- kl_V1460 `pseq` hd kl_V1460
                                                              !appl_2 <- appl_1 `pseq` kl_shen_recursive_cons_form appl_1
                                                              !appl_3 <- kl_V1460 `pseq` tl kl_V1460
                                                              !appl_4 <- appl_3 `pseq` kl_shen_recursive_cons_form appl_3
                                                              let !appl_5 = List []
                                                              !appl_6 <- appl_4 `pseq` (appl_5 `pseq` klCons appl_4 appl_5)
                                                              !appl_7 <- appl_2 `pseq` (appl_6 `pseq` klCons appl_2 appl_6)
                                                              appl_7 `pseq` klCons (ApplC (wrapNamed "cons" klCons)) appl_7) (do klIf (Atom (B True)) (do return kl_V1460) (do return (List [])))

kl_preclude :: Types.KLValue ->
               Types.KLContext Types.Env Types.KLValue
kl_preclude (!kl_V1461) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_V1361) -> do let !aw_1 = Types.Atom (Types.UnboundSym "shen.intern-type")
                                                                                             kl_V1361 `pseq` applyWrapper aw_1 [kl_V1361])))
                             !appl_2 <- appl_0 `pseq` (kl_V1461 `pseq` kl_map appl_0 kl_V1461)
                             appl_2 `pseq` kl_shen_preclude_h appl_2

kl_shen_preclude_h :: Types.KLValue ->
                      Types.KLContext Types.Env Types.KLValue
kl_shen_preclude_h (!kl_V1462) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_FilterDatatypes) -> do value (Types.Atom (Types.UnboundSym "shen.*datatypes*")))))
                                    !appl_1 <- value (Types.Atom (Types.UnboundSym "shen.*datatypes*"))
                                    !appl_2 <- appl_1 `pseq` (kl_V1462 `pseq` kl_difference appl_1 kl_V1462)
                                    !appl_3 <- appl_2 `pseq` klSet (Types.Atom (Types.UnboundSym "shen.*datatypes*")) appl_2
                                    appl_3 `pseq` applyWrapper appl_0 [appl_3]

kl_include :: Types.KLValue ->
              Types.KLContext Types.Env Types.KLValue
kl_include (!kl_V1463) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_V1362) -> do let !aw_1 = Types.Atom (Types.UnboundSym "shen.intern-type")
                                                                                            kl_V1362 `pseq` applyWrapper aw_1 [kl_V1362])))
                            !appl_2 <- appl_0 `pseq` (kl_V1463 `pseq` kl_map appl_0 kl_V1463)
                            appl_2 `pseq` kl_shen_include_h appl_2

kl_shen_include_h :: Types.KLValue ->
                     Types.KLContext Types.Env Types.KLValue
kl_shen_include_h (!kl_V1464) = do let !appl_0 = ApplC (Func "lambda" (Context (\(!kl_ValidTypes) -> do let !appl_1 = ApplC (Func "lambda" (Context (\(!kl_NewDatatypes) -> do value (Types.Atom (Types.UnboundSym "shen.*datatypes*")))))
                                                                                                        !appl_2 <- value (Types.Atom (Types.UnboundSym "shen.*datatypes*"))
                                                                                                        !appl_3 <- kl_ValidTypes `pseq` (appl_2 `pseq` kl_union kl_ValidTypes appl_2)
                                                                                                        !appl_4 <- appl_3 `pseq` klSet (Types.Atom (Types.UnboundSym "shen.*datatypes*")) appl_3
                                                                                                        appl_4 `pseq` applyWrapper appl_1 [appl_4])))
                                   !appl_5 <- value (Types.Atom (Types.UnboundSym "shen.*alldatatypes*"))
                                   !appl_6 <- kl_V1464 `pseq` (appl_5 `pseq` kl_intersection kl_V1464 appl_5)
                                   appl_6 `pseq` applyWrapper appl_0 [appl_6]

kl_preclude_all_but :: Types.KLValue ->
                       Types.KLContext Types.Env Types.KLValue
kl_preclude_all_but (!kl_V1465) = do !appl_0 <- value (Types.Atom (Types.UnboundSym "shen.*alldatatypes*"))
                                     let !appl_1 = ApplC (Func "lambda" (Context (\(!kl_V1363) -> do let !aw_2 = Types.Atom (Types.UnboundSym "shen.intern-type")
                                                                                                     kl_V1363 `pseq` applyWrapper aw_2 [kl_V1363])))
                                     !appl_3 <- appl_1 `pseq` (kl_V1465 `pseq` kl_map appl_1 kl_V1465)
                                     !appl_4 <- appl_0 `pseq` (appl_3 `pseq` kl_difference appl_0 appl_3)
                                     appl_4 `pseq` kl_shen_preclude_h appl_4

kl_include_all_but :: Types.KLValue ->
                      Types.KLContext Types.Env Types.KLValue
kl_include_all_but (!kl_V1466) = do !appl_0 <- value (Types.Atom (Types.UnboundSym "shen.*alldatatypes*"))
                                    let !appl_1 = ApplC (Func "lambda" (Context (\(!kl_V1364) -> do let !aw_2 = Types.Atom (Types.UnboundSym "shen.intern-type")
                                                                                                    kl_V1364 `pseq` applyWrapper aw_2 [kl_V1364])))
                                    !appl_3 <- appl_1 `pseq` (kl_V1466 `pseq` kl_map appl_1 kl_V1466)
                                    !appl_4 <- appl_0 `pseq` (appl_3 `pseq` kl_difference appl_0 appl_3)
                                    appl_4 `pseq` kl_shen_include_h appl_4

kl_shen_synonyms_help :: Types.KLValue ->
                         Types.KLContext Types.Env Types.KLValue
kl_shen_synonyms_help (!kl_V1471) = do let !appl_0 = List []
                                       !kl_if_1 <- appl_0 `pseq` (kl_V1471 `pseq` eq appl_0 kl_V1471)
                                       klIf kl_if_1 (do !appl_2 <- value (Types.Atom (Types.UnboundSym "shen.*tc*"))
                                                        let !appl_3 = ApplC (Func "lambda" (Context (\(!kl_V1365) -> do kl_V1365 `pseq` kl_shen_demod_rule kl_V1365)))
                                                        !appl_4 <- value (Types.Atom (Types.UnboundSym "shen.*synonyms*"))
                                                        !appl_5 <- appl_3 `pseq` (appl_4 `pseq` kl_mapcan appl_3 appl_4)
                                                        appl_2 `pseq` (appl_5 `pseq` kl_shen_demodulation_function appl_2 appl_5)) (do !kl_if_6 <- kl_V1471 `pseq` consP kl_V1471
                                                                                                                                       !kl_if_7 <- klIf kl_if_6 (do !appl_8 <- kl_V1471 `pseq` tl kl_V1471
                                                                                                                                                                    appl_8 `pseq` consP appl_8) (do return (Atom (B False)))
                                                                                                                                       klIf kl_if_7 (do let !appl_9 = ApplC (Func "lambda" (Context (\(!kl_Vs) -> do !kl_if_10 <- kl_Vs `pseq` kl_emptyP kl_Vs
                                                                                                                                                                                                                     klIf kl_if_10 (do !appl_11 <- kl_V1471 `pseq` hd kl_V1471
                                                                                                                                                                                                                                       !appl_12 <- kl_V1471 `pseq` tl kl_V1471
                                                                                                                                                                                                                                       !appl_13 <- appl_12 `pseq` hd appl_12
                                                                                                                                                                                                                                       let !appl_14 = List []
                                                                                                                                                                                                                                       !appl_15 <- appl_13 `pseq` (appl_14 `pseq` klCons appl_13 appl_14)
                                                                                                                                                                                                                                       !appl_16 <- appl_11 `pseq` (appl_15 `pseq` klCons appl_11 appl_15)
                                                                                                                                                                                                                                       !appl_17 <- appl_16 `pseq` kl_shen_pushnew appl_16 (Types.Atom (Types.UnboundSym "shen.*synonyms*"))
                                                                                                                                                                                                                                       !appl_18 <- kl_V1471 `pseq` tl kl_V1471
                                                                                                                                                                                                                                       !appl_19 <- appl_18 `pseq` tl appl_18
                                                                                                                                                                                                                                       !appl_20 <- appl_19 `pseq` kl_shen_synonyms_help appl_19
                                                                                                                                                                                                                                       appl_17 `pseq` (appl_20 `pseq` kl_do appl_17 appl_20)) (do !appl_21 <- kl_V1471 `pseq` tl kl_V1471
                                                                                                                                                                                                                                                                                                  !appl_22 <- appl_21 `pseq` hd appl_21
                                                                                                                                                                                                                                                                                                  appl_22 `pseq` (kl_Vs `pseq` kl_shen_free_variable_warnings appl_22 kl_Vs)))))
                                                                                                                                                        !appl_23 <- kl_V1471 `pseq` tl kl_V1471
                                                                                                                                                        !appl_24 <- appl_23 `pseq` hd appl_23
                                                                                                                                                        !appl_25 <- appl_24 `pseq` kl_shen_extract_vars appl_24
                                                                                                                                                        !appl_26 <- kl_V1471 `pseq` hd kl_V1471
                                                                                                                                                        !appl_27 <- appl_26 `pseq` kl_shen_extract_vars appl_26
                                                                                                                                                        !appl_28 <- appl_25 `pseq` (appl_27 `pseq` kl_difference appl_25 appl_27)
                                                                                                                                                        appl_28 `pseq` applyWrapper appl_9 [appl_28]) (do klIf (Atom (B True)) (do simpleError (Types.Atom (Types.Str "odd number of synonyms\n"))) (do return (List []))))

kl_shen_pushnew :: Types.KLValue ->
                   Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_pushnew (!kl_V1472) (!kl_V1473) = do !appl_0 <- kl_V1473 `pseq` value kl_V1473
                                             !kl_if_1 <- kl_V1472 `pseq` (appl_0 `pseq` kl_elementP kl_V1472 appl_0)
                                             klIf kl_if_1 (do kl_V1473 `pseq` value kl_V1473) (do !appl_2 <- kl_V1473 `pseq` value kl_V1473
                                                                                                  !appl_3 <- kl_V1472 `pseq` (appl_2 `pseq` klCons kl_V1472 appl_2)
                                                                                                  kl_V1473 `pseq` (appl_3 `pseq` klSet kl_V1473 appl_3))

kl_shen_demod_rule :: Types.KLValue ->
                      Types.KLContext Types.Env Types.KLValue
kl_shen_demod_rule (!kl_V1474) = do !kl_if_0 <- kl_V1474 `pseq` consP kl_V1474
                                    !kl_if_1 <- klIf kl_if_0 (do !appl_2 <- kl_V1474 `pseq` tl kl_V1474
                                                                 !kl_if_3 <- appl_2 `pseq` consP appl_2
                                                                 klIf kl_if_3 (do let !appl_4 = List []
                                                                                  !appl_5 <- kl_V1474 `pseq` tl kl_V1474
                                                                                  !appl_6 <- appl_5 `pseq` tl appl_5
                                                                                  appl_4 `pseq` (appl_6 `pseq` eq appl_4 appl_6)) (do return (Atom (B False)))) (do return (Atom (B False)))
                                    klIf kl_if_1 (do !appl_7 <- kl_V1474 `pseq` hd kl_V1474
                                                     let !aw_8 = Types.Atom (Types.UnboundSym "shen.rcons_form")
                                                     !appl_9 <- appl_7 `pseq` applyWrapper aw_8 [appl_7]
                                                     !appl_10 <- kl_V1474 `pseq` tl kl_V1474
                                                     !appl_11 <- appl_10 `pseq` hd appl_10
                                                     let !aw_12 = Types.Atom (Types.UnboundSym "shen.rcons_form")
                                                     !appl_13 <- appl_11 `pseq` applyWrapper aw_12 [appl_11]
                                                     let !appl_14 = List []
                                                     !appl_15 <- appl_13 `pseq` (appl_14 `pseq` klCons appl_13 appl_14)
                                                     !appl_16 <- appl_15 `pseq` klCons (Types.Atom (Types.UnboundSym "->")) appl_15
                                                     appl_9 `pseq` (appl_16 `pseq` klCons appl_9 appl_16)) (do klIf (Atom (B True)) (do let !aw_17 = Types.Atom (Types.UnboundSym "shen.f_error")
                                                                                                                                        applyWrapper aw_17 [ApplC (wrapNamed "shen.demod-rule" kl_shen_demod_rule)]) (do return (List [])))

kl_shen_demodulation_function :: Types.KLValue ->
                                 Types.KLValue -> Types.KLContext Types.Env Types.KLValue
kl_shen_demodulation_function (!kl_V1475) (!kl_V1476) = do !appl_0 <- kl_tc (ApplC (wrapNamed "-" Primitives.subtract))
                                                           !appl_1 <- kl_shen_default_rule
                                                           !appl_2 <- kl_V1476 `pseq` (appl_1 `pseq` kl_append kl_V1476 appl_1)
                                                           !appl_3 <- appl_2 `pseq` klCons (Types.Atom (Types.UnboundSym "shen.demod")) appl_2
                                                           !appl_4 <- appl_3 `pseq` klCons (Types.Atom (Types.UnboundSym "define")) appl_3
                                                           !appl_5 <- appl_4 `pseq` kl_eval appl_4
                                                           !appl_6 <- klIf kl_V1475 (do kl_tc (ApplC (wrapNamed "+" add))) (do return (Types.Atom (Types.UnboundSym "shen.skip")))
                                                           !appl_7 <- appl_6 `pseq` kl_do appl_6 (Types.Atom (Types.UnboundSym "synonyms"))
                                                           !appl_8 <- appl_5 `pseq` (appl_7 `pseq` kl_do appl_5 appl_7)
                                                           appl_0 `pseq` (appl_8 `pseq` kl_do appl_0 appl_8)

kl_shen_default_rule :: Types.KLContext Types.Env Types.KLValue
kl_shen_default_rule = do let !appl_0 = List []
                          !appl_1 <- appl_0 `pseq` klCons (Types.Atom (Types.UnboundSym "X")) appl_0
                          !appl_2 <- appl_1 `pseq` klCons (Types.Atom (Types.UnboundSym "->")) appl_1
                          appl_2 `pseq` klCons (Types.Atom (Types.UnboundSym "X")) appl_2

expr3 :: Types.KLContext Types.Env Types.KLValue
expr3 = do (return $ List [])
